var STATELAYERS=function(t){"use strict";function e(t){return"number"==typeof t}const n=Object.freeze({HIGH_OPEN:")",HIGH_CLOSED:"]",VALUE:"",LOW_CLOSED:"[",LOW_OPEN:"("});const r=new Map([[n.HIGH_OPEN,-1],[n.HIGH_CLOSED,0],[n.VALUE,0],[n.LOW_CLOSED,0],[n.LOW_OPEN,1]]);function i(t){return t[1]==n.LOW_CLOSED||t[1]==n.LOW_OPEN}function s(t){if(Array.isArray(t)||(t=[t,n.VALUE]),2!=t.length)throw new Error("Endpoint must be a length-2 array",t);let[r,i]=t;if(s=i,!Object.values(n).includes(s))throw new Error("Unsupported endpoint type",i);var s;if(r==-1/0)return[null,n.LOW_CLOSED];if(r==1/0)return[null,n.HIGH_CLOSED];if(null==r||null==r||e(r))return[r,i];throw new Error("endpoint must be null or number",r)}const o=s(1/0),c=s(-1/0);function l(t){return null!=t[0]?[t[0],t[1]]:i(t)?[-1/0,n.LOW_CLOSED]:[1/0,n.HIGH_CLOSED]}function u(t,e){return t<e?-1:t>e?1:0}function a(t,e){const[n,i]=l(t),[s,o]=l(e),c=u(n,s);if(0==c){return u(r.get(i),r.get(o))}return c}function h(t,e){return a(t,e)<=0}function f(t,e){return a(t,e)>=0}function _(t,e){return 0==a(t,e)}function d(t){const[e,r,i,o]=t,c=i?n.LOW_CLOSED:n.LOW_OPEN,l=o?n.HIGH_CLOSED:n.HIGH_OPEN;return[s([e,c]),s([r,l])]}function p(t,e){const[n,r]=d(t);return h(n,e=s(e))&&h(e,r)}const g={le:h,lt:function(t,e){return a(t,e)<0},ge:f,gt:function(t,e){return a(t,e)>0},cmp:a,eq:_,min:function(t,e){return h(t,e)?t:e},max:function(t,e){return f(t,e)?t:e},flip:function(t,e){if(e)throw new Error("target is deprecated");let[r,i]=t;if(null==r)return t;if(i==n.HIGH_OPEN)return[r,n.LOW_CLOSED];if(i==n.HIGH_CLOSED)return[r,n.LOW_OPEN];if(i==n.LOW_OPEN)return[r,n.HIGH_CLOSED];if(i==n.LOW_CLOSED)return[r,n.HIGH_OPEN];throw new Error("illegal endpoint type",i)},from_interval:d,from_input:s,types:{...n},POS_INF:o,NEG_INF:c},m={covers_endpoint:p,covers_point:function(t,e){return p(t,e)},is_singular:function(t){const[e,n]=d(itv);return _(e,n)},from_endpoints:function(t,e){let[r,s]=t,[o,c]=e;if(!i(t))throw new Error("illegal low endpoint",t);if((l=e)[1]!=n.HIGH_CLOSED&&l[1]!=n.HIGH_OPEN)throw new Error("illegal high endpoint",e);var l;return[r,o,s==n.LOW_CLOSED,c==n.HIGH_CLOSED]},from_input:function(t){let n=t;if(null==n||null==n)throw new Error("input is undefined");if(!Array.isArray(n)){if(!e(n))throw new Error(`input: ${t}: must be Array or Number`);n=[n,n,!0,!0]}1==n.length?n=[n[0],n[0],!0,!0]:2==n.length?n=[n[0],n[1],!0,!1]:3==n.length?n=[n[0],n[1],n[2],!1]:n.length>4&&(n=[n[0],n[1],n[2],n[4]]);let[r,i,s,o]=n;if(null!=r&&r!=-1/0||(r=null),null!=i&&i!=1/0||(i=null),null==r)s=!0;else if(!e(r))throw new Error("low not a number",r);if(null==i)o=!0;else if(!e(i))throw new Error("high not a number",i);if(null!=r&&null!=i){if(r>i)throw new Error("low > high",r,i);r==i&&(s=!0,o=!0)}if("boolean"!=typeof s)throw new Error("lowInclude not boolean");if("boolean"!=typeof o)throw new Error("highInclude not boolean");return[r,i,s,o]}};class v{nearby(t){throw new Error("Not implemented")}empty(){return null==this.first()}first(){let{center:t,right:e}=this.nearby(g.NEG_INF);return t.length>0?g.NEG_INF:g.lt(e,g.POS_INF)?e:void 0}last(){let{left:t,center:e}=this.nearby(g.POS_INF);return e.length>0?g.POS_INF:g.gt(t,g.NEG_INF)?t:void 0}right_region(t){const e=function(t){const e=g.from_interval(t.itv)[1];return g.flip(e)}(t);if(null!=e[0])return this.nearby(e)}left_region(t){const e=function(t){const e=g.from_interval(t.itv)[0];return g.flip(e)}(t);if(null!=e[0])return this.nearby(e)}find_region(t,e={}){let n,{direction:r=1,condition:i=t=>t.length>0}=e;for(;;){if(n=1==r?this.right_region(t):this.left_region(t),null==n)return;if(i(n.center))return n;t=n}}regions(t){return new y(this,t)}}class y{constructor(t,e={}){let{start:n=-1/0,stop:r=1/0,includeEmpty:i=!0}=e;if(n>r)throw new Error("stop must be larger than start",n,r);this._index=t,this._start=g.from_input(n),this._stop=g.from_input(r),this._condition=i?()=>!0:t=>t.length>0,this._current}next(){if(null==this._current&&(this._current=this._index.nearby(this._start),this._condition(this._current.center)))return{value:this._current,done:!1};let t={condition:this._condition,direction:1};return this._current=this._index.find_region(this._current,t),null==this._current?{value:void 0,done:!0}:{value:this._current,done:!1}}[Symbol.iterator](){return this}}function w(t,e){return g.cmp(t,e)}function b(t,e){return g.cmp(e,t)}function E(t,e,n,r,i){const s={center:n};if(0==n.length)s.right=i,s.left=t;else{r.sort(w);let n=r[0],o=r.slice(-1)[0],c=!g.eq(n,o);e.sort(b);let l=e[0],u=e.slice(-1)[0],a=!g.eq(l,u);g.le(i,n)?s.right=i:s.right=g.flip(n),s.next=c?s.right:i,g.ge(t,l)?s.left=t:s.left=g.flip(l),s.prev=a?s.left:t}let o=g.flip(s.left),c=g.flip(s.right);return s.itv=m.from_endpoints(o,c),s}class x extends v{constructor(t){super(),this._src=t,this._cache=t.createCache()}nearby(t){const e=this._src.index.nearby(t);return e.center=[this._cache],e}}class O{constructor(t,e,n){n=n||{},this.publisher=t,this.name=e,this.init=void 0!==n.init&&n.init,this.subscriptions=[]}subscribe(t,e){if(!t||"function"!=typeof t)throw new Error("Callback not a function",t);const n=new $(this,t,e);if(this.subscriptions.push(n),this.init&&n.init){n.init_pending=!0;let t=this;Promise.resolve().then((function(){const e=t.publisher.eventifyInitEventArgs(t.name)||[];n.init_pending=!1;for(let r of e)t.trigger(r,[n],!0)}))}return n}trigger(t,e,n){let r,i;for(const s of e)if(!s.terminated){r={src:this.publisher,name:this.name,sub:s,init:n},i=s.ctx||this.publisher;try{s.callback.call(i,t,r)}catch(t){console.log(`Error in ${this.name}: ${s.callback} ${t}`)}}}unsubscribe(t){let e=this.subscriptions.indexOf(t);e>-1&&(this.subscriptions.splice(e,1),t.terminate())}}class ${constructor(t,e,n){n=n||{},this.event=t,this.name=t.name,this.callback=e,this.init=void 0===n.init?this.event.init:n.init,this.init_pending=!1,this.terminated=!1,this.ctx=n.ctx}terminate(){this.terminated=!0,this.callback=void 0,this.event.unsubscribe(this)}}function I(t){return t.__eventify_eventMap=new Map,t.__eventify_buffer=[],t}function k(t){function e(t,e){const n=t.__eventify_eventMap.get(e);if(null==n)throw new Error("Event undefined",e);return n}t.eventifyDefine=function(t,e){if(this.__eventify_eventMap.has(t))throw new Error("Event already defined",t);this.__eventify_eventMap.set(t,new O(this,t,e))},t.eventifyTrigger=function(t,e){return this.eventifyTriggerAll([{name:t,eArg:e}])},t.eventifyTriggerAlike=function(t,e){return this.eventifyTriggerAll(e.map((e=>({name:t,eArg:e}))))},t.eventifyTriggerAll=function(t){if(0==t.length)return;let n=t.map((t=>{let{name:n,eArg:r}=t,i=e(this,n),s=i.subscriptions.filter((t=>0==t.init_pending));return[i,r,s]}),this);const r=n.length,i=this.__eventify_buffer,s=this.__eventify_buffer.length;this.__eventify_buffer.length=s+r;for(let t=0;t<r;t++)i[s+t]=n[t];if(0==s){let t=this;Promise.resolve().then((function(){for(let[e,n,r]of t.__eventify_buffer)e.trigger(n,r,!1);t.__eventify_buffer=[]}))}},t.eventifySubscriptions=function(t){return e(this,t).subscriptions},t.on=function(t,n,r){return e(this,t).subscribe(n,r)},t.off=function(t){return e(this,t.name).unsubscribe(t)}}k(class{constructor(t){I(this),this._value=t,this.eventifyDefine("change",{init:!0})}eventifyInitEventArgs(t){if("change"==t)return[this._value]}get value(){return this._value}set value(t){t!=this._value&&(this._value=t,this.eventifyTrigger("change",t))}}.prototype);const C="__callback";function S(t){t[`${C}_handlers`]=[]}function L(t){let e={handler:t};return this[`${C}_handlers`].push(e),e}function N(t){let e=this[`${C}_handlers`].indexOf(t);e>-1&&this[`${C}_handlers`].splice(e,1)}function q(t){this[`${C}_handlers`].forEach((function(e){e.handler(t)}))}function F(t){const e={add_callback:L,remove_callback:N,notify_callbacks:q};Object.assign(t,e)}function P(t){if(null==t)return!1;const e=["add_callback","remove_callback"];for(const n of e){if(!(n in t))return!1;if("function"!=typeof t[n])return!1}return!0}function M(t){return"number"==typeof t&&isFinite(t)}function A(t,e){if(!M(e))throw new Error(`${t} must be finite number ${e}`)}const H={now:()=>performance.now()/1e3},G={now:()=>new Date/1e3};function D(t,e,n,r={}){let{valueFunc:i,stateFunc:s}=r;if(null!=i){return{value:i({sources:t,states:e,offset:n}),dynamic:e.map((t=>t.dymamic)).some((t=>t)),offset:n}}return null!=s?{...s({sources:t,states:e,offset:n}),offset:n}:0==e.length?{value:void 0,dynamic:!1,offset:n}:{...e[0],offset:n}}function W(t){for(var e="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",r=0;r<t;r++)e+=n.charAt(Math.floor(52*Math.random()));return e}function T(t,e){let n,r=performance.now()+(e=Math.max(e,0));return n=setTimeout((function e(){const i=r-performance.now();i>0?n=setTimeout(e,i+1):t()}),e+1),{cancel:function(){clearTimeout(n)}}}function j(t,e){const[n,r,i,s]=t;return Math.pow(r,2)-2*i*(n-e)>=0}function z(t,e){const[n,r,i,s]=t;if(0===i&&0===r)return n!=e?[]:void 0;if(0===i)return[s+(e-n)/r];if(!1===j(t,e))return[];if(0===Math.pow(r,2)-2*i*(n-e))return[s-r/i];var o=Math.sqrt(Math.pow(r,2)-2*i*(n-e)),c=s+(-r+o)/i,l=s+(-r-o)/i;return[Math.min(c,l),Math.max(c,l)]}const U={calculate:function(t,e){const[n,r,i,s]=t,o=e-s;return[n+r*o+.5*i*Math.pow(o,2),r+i*o,i,e]},has_real_solutions:j,get_real_solutions:z,calculate_time_ranges:function(t,e){const[n,r,i,s]=t;let[o,c]=e;if(null==o&&(o=-1/0),null==c&&(c=1/0),o==-1/0&&c==1/0)return[[null,null]];if(0===r&&0===i)return n>=o&&n<=c?[[null,null]]:[];let l=[];if(-1/0<o&&l.push(...z(t,o)),c<1/0&&l.push(...z(t,c)),l=[...new Set(l)],l.sort(((t,e)=>t-e)),o==-1/0){if(0==l.length)return n<=c?[[null,null]]:[];if(1==l.length)return i>0?[]:i<0?[[null,null]]:r>0?[[null,l[0]]]:[[l[0],null]];if(2==l.length){if(i>0)return[[l[0],l[1]]];if(i<0)return[[null,l[0]],[l[1],null]]}}else if(c==1/0){if(0==l.length)return n>=o?[[null,null]]:[];if(1==l.length)return i>0?[[null,null]]:i<0?[]:r>0?[[l[0],null]]:[[null,l[0]]];if(2==l.length){if(i>0)return[[null,l[0]],[l[1],null]];if(i<0)return[[l[0],l[1]]]}}else{if(0==l.length)return[];if(1==l.length)return[];if(2==l.length)return[[l[0],l[1]]];if(3==l.length)return[[l[0],l[2]]];if(4==l.length)return[[l[0],l[1]],[l[2],l[3]]]}},check_range:function(t){if(Array.isArray(t)&&2!=t.length)throw new Error(`range must have two elements ${t}`);null==t[0]||A("low",t[0]),null==t[1]||A("high",t[1])}};class V{constructor(t={}){let{CacheClass:e=B,...n}=t;this._options=n,S(this),I(this),this.eventifyDefine("change",{init:!0}),this.index,this._CacheClass=e,this._private_cache,this._consumer_caches=[]}get options(){return this._options}get cache(){return null==this._private_cache&&(this._private_cache=new this._CacheClass(this)),this._private_cache}query(t){return this.cache.query(t)}createCache(){const t=new this._CacheClass(this);return this._consumer_caches.push(t),t}releaseCache(t){const e=this._consumer_caches.indexOf(t);e>-1&&this._consumer_caches.splice(e,1)}clearCaches(){for(const t of this._consumer_caches)t.clear();null!=this._private_cache&&this._private_cache.clear()}onchange(){this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change")}regions(t){return this.index.regions(t)}sample(t={}){if(this.index.empty())return[];let{start:e,stop:n,step:r=1}=t;if(null==e){const t=this.index.first();if(null==t[0])throw new Error("undefined start");e=t[0]}if(null==n){const t=this.index.last();if(null==t[0])throw new Error("undefined stop");n=t[0]}if(e>n)throw new Error("stop must be larger than start",e,n);const i=this.createCache(),s=function(t,e,n=1,r={}){const i=[],{include_end:s=!1}=r;if(0===n)throw new Error("Step cannot be zero.");if(t<e)for(let r=t;r<e;r+=n)i.push(r);else if(t>e)for(let r=t;r>e;r-=n)i.push(r);return s&&i.push(e),i}(e,n,r,{include_end:!0}).map((t=>[i.query(t).value,t]));return this.releaseCache(i),s}}F(V.prototype),k(V.prototype);class B{constructor(t){this._layer=t,this._nearby,this._state}get layer(){return this._layer}query(t){const e=null==this._nearby||!m.covers_endpoint(this._nearby.itv,t);if(!e&&null!=this._state&&!this._state.dynamic)return{...this._state,offset:t};e&&(this._nearby=this._layer.index.nearby(t));const n=this._nearby.center.map((e=>e.query(t))),r=D(this._nearby.center,n,t,this._layer.options);return this._state=r.dynamic?void 0:r,r}clear(){this._nearby=void 0,this._state=void 0}}class J{constructor(t){this._callback=t,this._handle,this._delay}set delay(t){if("number"!=typeof t)throw new Error(`delay must be a number ${t}`);this._delay!=t&&(this._delay=t)}get delay(){return this._delay}is_polling(){return null!=this._handle}pause(){null!=this._handle&&(this._handle.cancel(),this._handle=void 0)}poll(){this._callback(),this.pause(),this.resume()}resume(){if(null==this._handle)if(0==this._delay){const t=requestAnimationFrame(this.poll.bind(this));this._handle={cancel:()=>cancelAnimationFrame(t)}}else{const t=setTimeout(this.poll.bind(this),this._delay);this._handle={cancel:()=>clearTimeout(t)}}}}const R=new class{constructor(){this._binding_set=new Set,this._cursor_map=new Map,this._poller=new J(this.onpoll.bind(this))}bind(t,e,n){if(null==n)n=0;else if("number"!=typeof n)throw new Error(`delay must be a number ${n}`);let r={cursor:t,callback:e,delay:n};if(this._binding_set.add(r),this._cursor_map.has(t))this._cursor_map.get(t).bindings.push(r);else{let e=t.on("change",this.oncursorchange.bind(this));this._cursor_map.set(t,{sub:e,polling:!1,bindings:[r]})}return r}release(t){if(!this._binding_set.delete(t))return;const e=t.cursor,{sub:n,bindings:r}=this._cursor_map.get(e),i=r.indexOf(t);i>=0&&r.splice(i,1),0==r.length&&(e.off(n),this._cursor_map.delete(e))}oncursorchange(t,e){const n=e.src,r=t;this._cursor_map.get(n).polling=r.dynamic;const i=[...this._cursor_map.values()].filter((t=>t.polling));this.reevaluate_polling(i);const{bindings:s}=this._cursor_map.get(n);for(const t of s)t.callback(r)}onpoll(){const t=H.now();for(const[e,n]of this._cursor_map)if(n.polling){const r=e.query(t);for(const t of n.bindings)t.callback(r)}}reevaluate_polling(t){if(0==t.length)this._poller.pause();else{const e=[];for(const n of t)for(const t of n.bindings)e.push(t.delay);const n=Math.min(...e);this._poller.delay=n,this._poller.pause(),this._poller.resume()}}};function X(t,e){const n=t.ctrl.query(e);if(!M(n.value))throw new Error(`warning: cursor ctrl value must be number ${n.value}`);return n}class Y{constructor(){S(this),I(this),this.eventifyDefine("change",{init:!0})}query(){throw new Error("query() not implemented")}get value(){return this.query().value}get(){return this.query().value}eventifyInitEventArgs(t){if("change"==t)return[this.query()]}bind(t,e,n={}){return function(t,e,n){return R.bind(t,e,n)}(this,t,e)}release(t){return e=t,R.release(e);var e}onchange(){this.notify_callbacks(),this.eventifyTrigger("change",this.query())}}function K(t){return null!=t&&("now"in t&&"function"==typeof t.now)}F(Y.prototype),k(Y.prototype);const Q=function(){const t=H.now(),e=G.now();return{now:(n=H.now())=>e+(n-t)}}();function Z(t){return t.itv=m.from_input(t.itv),t.id=t.id||W(10),t}function tt(t){return!!P(t)&&("get"in t&&("function"==typeof t.get&&("update"in t&&"function"==typeof t.update)))}class et{constructor(t={}){S(this),this._map=new Map;let{insert:e}=t;null!=e&&this._update({insert:e,reset:!0})}update(t){return Promise.resolve().then((()=>{let e;return null!=t&&(e=this._update(t),this.notify_callbacks(e)),e}))}_update(t){const e=new Map;let{insert:n=[],remove:r=[],reset:i=!1}=t;if(i){for(const[t,n]of this._map.entries())e.set(t,{id:t,new:void 0,old:n});this._map=new Map}else for(const t of r){let n=this._map.get(t);null!=n&&(e.set(n.id,{id:n.id,new:void 0,old:n}),this._map.delete(t))}for(let t of n){t=Z(t);const n=e.get(t.id),r=null!=n?n.old:this._map.get(t.id);e.set(t.id,{id:t.id,new:t,old:r}),this._map.set(t.id,t)}return[...e.values()]}get(){return[...this._map.values()]}}function nt(t){return!!P(t)&&("get"in t&&("function"==typeof t.get&&("set"in t&&"function"==typeof t.set)))}F(et.prototype);class rt{constructor(t={}){S(this),this._items=[];const{value:e}=t;null!=e&&(this._items=[{id:W(10),itv:[null,null,!0,!0],type:"static",data:e}])}set(t){return Promise.resolve().then((()=>{this._items=t,this.notify_callbacks()}))}get(){return this._items}}F(rt.prototype);const it="srcprop",st=`__${it}`;function ot(t){t[`${st}`]=new Map}function ct(t){const e={};e[`${it}_register`]=function(t,e={}){let{mutable:n=!0}=e;const r=this[`${st}`];r.set(t,{init:!1,mutable:n,entity:void 0,handles:[]}),Object.defineProperty(this,t,{get:function(){return r.get(t).entity},set:function(e){this[`${it}_check`]&&(e=this[`${it}_check`](t,e)),e!=r.get(t).entity&&this[`${st}_attach`](t,e)}})},e[`${st}_attach`]=function(t,e){const n=this[`${st}`].get(t);if(n.init&&!n.mutable)throw new Error(`${t} can not be reassigned`);const r=Array.isArray(e)?e:[e];if(n.handles.length>0)for(const[t,e]of Object.entries(r))P(e)&&e.remove_callback(n.handles[t]);if(n.handles=[],n.entity=e,n.init=!0,this[`${it}_onchange`]){const e=function(e){this[`${it}_onchange`](t,e)}.bind(this);for(const t of r)P(t)&&n.handles.push(t.add_callback(e));this[`${it}_onchange`](t,"reset")}},Object.assign(t,e)}class lt{constructor(){this._array=[]}get size(){return this._array.length}get array(){return this._array}indexOf(t){const e=g.from_input(t);let n=0,r=this._array.length-1;for(;n<=r;){const t=Math.floor((n+r)/2);let i=this._array[t];if(g.eq(i,e))return[!0,t];g.lt(i,e)?n=t+1:r=t-1}return[!1,n]}geIndexOf(t){let[e,n]=this.indexOf(t);return n<this._array.length?n:-1}leIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n:n-1,n>=0?n:-1}gtIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n+1:n,n<this._array.length?n:-1}ltIndexOf(t){let[e,n]=this.indexOf(t);return n-=1,n>=0?n:-1}update(t=[],e=[]){let n=[];for(let e of t){let[t,r]=this.indexOf(e);t&&n.push(r)}for(let t of n)this._array[t]=void 0;let r=n.length>0,i=e.length>0;i&&function(t,e){const n=t.length,r=e.length;t.length+=r;for(let i=0;i<r;i++)t[n+i]=e[i]}(this._array,e),(r||i)&&this._array.sort(g.cmp),r&&(this._array.length-=n.length),i&&function(t){let e=0;for(;!(e+1>=t.length);)g.eq(t[e],t[e+1])?t.splice(e+1,1):e+=1}(this._array)}get_by_index(t){if(t>-1&&t<this._array.length)return this._array[t]}lookup(t){null==t&&(t=[null,null,!0,!0]);let[e,n]=g.from_interval(t),r=this.geIndexOf(e),i=this.leIndexOf(n);return-1==r||-1==i?[]:this._array.slice(r,i+1)}lt(t){return this.get_by_index(this.ltIndexOf(t))}le(t){return this.get_by_index(this.leIndexOf(t))}get(t){let[e,n]=this.indexOf(t);if(e)return this._array[n]}gt(t){return this.get_by_index(this.gtIndexOf(t))}ge(t){return this.get_by_index(this.geIndexOf(t))}}const{LOW_CLOSED:ut,LOW_OPEN:at,HIGH_CLOSED:ht,HIGH_OPEN:ft}=g.types,_t=[ut,at,ht,ft];class dt{constructor(){this._map=new Map([[ut,new Set],[at,new Set],[ht,new Set],[ft,new Set]])}add(t){const[e,n]=t;return this._map.get(n).add(e)}has(t){const[e,n]=t;return this._map.get(n).has(e)}get(t){const[e,n]=t;return this._map.get(n).get(e)}list(){const t=_t.map((t=>[...this._map.get(t).values()].map((e=>[e,t]))));return[].concat(...t)}}const pt="low",gt="active",mt="high";class vt{constructor(){this._map=new Map([[ut,new Map],[at,new Map],[ht,new Map],[ft,new Map]])}get_items_by_role(t,e){const[n,r]=t,i=this._map.get(r).get(n);return null!=i?i[e]:[]}register(t,e,n){const[r,i]=t,s=this._map.get(i);s.has(r)||s.set(r,{low:[],active:[],high:[]});const o=s.get(r),c=o[pt].length+o[mt].length==0;-1==o[n].findIndex((t=>t.id==e.id))&&o[n].push(e);const l=o[pt].length+o[mt].length==0;return c&&!l}unregister(t,e){const[n,r]=t,i=this._map.get(r),s=i.get(n);if(null!=s){const t=s[pt].length+s[mt].length==0;for(const t of[pt,gt,mt]){let n=s[t].findIndex((t=>t.id==e.id));n>-1&&s[t].splice(n,1)}const r=s[pt].length+s[mt].length==0;if(!t&&r)return i.delete(n),!0}return!1}}class yt extends v{constructor(t){if(super(),!tt(t)&&!nt(t))throw new Error(`stateProvider must be collectionProvider or variableProvider ${t}`);this._sp=t,this._initialise(),this.refresh()}get src(){return this._sp}_initialise(){this._itemsmap=new vt,this._endpoints=new lt,this._index=[]}refresh(t){const e=new dt,n=new dt;let r,i=[],s=[];if(null==t)i=this.src.get()||[],this._initialise();else for(const e of t)null!=e.new&&i.push(e.new),null!=e.old&&s.push(e.old);for(const t of s)for(const n of this._endpoints.lookup(t.itv)){this._itemsmap.unregister(n,t)&&e.add(n)}for(const t of i){const[e,i]=g.from_interval(t.itv);r=this._itemsmap.register(e,t,pt),r&&n.add(e),r=this._itemsmap.register(i,t,mt),r&&n.add(i)}this._endpoints.update(e.list(),n.list());const o=new Set;for(const t of this._endpoints.array){for(let e of this._itemsmap.get_items_by_role(t,pt))o.add(e);for(let e of o)this._itemsmap.register(t,e,gt);for(let e of this._itemsmap.get_items_by_role(t,mt))o.delete(e)}}_covers(t){const e=g.from_input(t),n=this._endpoints.le(e)||g.NEG_INF,r=this._endpoints.ge(e)||g.POS_INF;if(g.eq(n,r))return this._itemsmap.get_items_by_role(n,gt);{const t=this._itemsmap.get_items_by_role(n,gt),e=this._itemsmap.get_items_by_role(r,gt),i=new Set(t.map((t=>t.id)));return e.filter((t=>i.has(t.id)))}}nearby(t){const e=g.from_input(t);let n=this._covers(e);const r=[],i=[];for(const t of n){const[e,n]=g.from_interval(t.itv);r.push(n),i.push(e)}let s,o=e;for(;!(o=this._endpoints.lt(o)||g.NEG_INF,null==o[0]||(s=this._itemsmap.get_items_by_role(o,mt),s.length>0)););let c=e;for(;!(c=this._endpoints.gt(c)||g.POS_INF,null==c[0]||(s=this._itemsmap.get_items_by_role(c,pt),s.length>0)););return E(o,i,n,r,c)}}class wt{constructor(t){this._itv=t}get itv(){return this._itv}state(t){throw new Error("not implemented")}query(t){return m.covers_point(this._itv,t)?{...this.state(t),offset:t}:{value:void 0,dynamic:!1,offset:t}}}class bt extends wt{constructor(t,e){super(t),this._value=e}state(){return{value:this._value,dynamic:!1}}}class Et extends wt{constructor(t,e){super(t),this._vector=e}state(t){const[e,n,r,i]=U.calculate(this._vector,t);return{value:e,dynamic:0!=n||0!=r}}}function xt(t){return Math.pow(t,2)}class Ot extends wt{constructor(t,e){super(t);let{v0:n,v1:r,easing:i}=e,[s,o]=this._itv.slice(0,2);this._dynamic=r-n!=0,this._trans=function(t){return t-=s,t/=parseFloat(o-s),"ease-in"==i?t=xt(t):"ease-out"==i?t=function(t){return 1-xt(1-t)}(t):"ease-in-out"==i&&(t=function(t){return t<.5?xt(2*t)/2:(2-xt(2*(1-t)))/2}(t)),t=Math.max(t,0),t=Math.min(t,1),n+(r-n)*t}}state(t){return{value:this._trans(t),dynamic:this._dynamic}}}class $t extends wt{constructor(t,e){super(t),this._trans=function(t){if(t.length<1)return function(){};if(1==t.length)return function(){return t[0][0]};const e=[...t].sort(((t,e)=>t[1]-e[1]));return function(t){if(t<=e[0][1]){const[n,r]=e[0],[i,s]=e[1];return n+(t-r)*(i-n)/(s-r)}if(t>=e[e.length-1][1]){const[n,r]=e[e.length-2],[i,s]=e[e.length-1];return n+(t-r)*(i-n)/(s-r)}for(let n=0;n<e.length-1;n++)if(t>=e[n][1]&&t<=e[n+1][1]){const[r,i]=e[n],[s,o]=e[n+1];return r+(t-i)*(s-r)/(o-i)}}}(e)}state(t){return{value:this._trans(t),dynamic:!0}}}function It(t,e){let{type:n="static",data:r}=e;return"static"==n?new bt(t,r):"transition"==n?new Ot(t,r):"interpolation"==n?new $t(t,r):"motion"==n?new Et(t,r):void console.log("unrecognized segment type",n)}function kt(t){if(null==t)return!1;if(!(t instanceof V))return!1;const e=Object.getOwnPropertyDescriptor(t,"src");return 0!=!(!e?.get||!e?.set)}function Ct(t={}){const{src:e,...n}=t,r=new V({CacheClass:St,...n});return ot(r),ct(r),r.srcprop_register("src"),r.srcprop_check=function(t,e){if("src"==t){if(!tt(e)&&!nt(e))throw new Error(`"src" must collectionProvider or variableProvider ${e}`);return e}},r.srcprop_onchange=function(t,e){"src"==t&&("reset"==e&&(tt(r.src)||nt(r.src))&&(r.index=new yt(r.src)),null!=r.index&&(tt(r.src)?r.index.refresh(e):nt(r.src)&&r.index.refresh(),r.onchange()))},r.get_items=function(t){return[...r.index.nearby(t).center]},r.update=function(t){return Lt(r,t)},r.append=function(t,e){return function(t,e,n){const r=g.from_input(n),i=e.filter((t=>{const e=g.from_interval(t.itv)[1];return g.ge(e,r)})).map((t=>{if(m.covers_endpoint(t.itv,r)){const e={...t};return e.itv=[n,t.itv[1],!0,t.itv[3]],e}return t})),s=t.index.nearby(n).center.map((t=>{const e={...t};return e.itv=[t.itv[0],n,t.itv[2],!1],e})),o=t.src.get().filter((t=>{const e=g.from_interval(t.itv)[0];return g.gt(e,r)})).map((t=>t.id)),c=[...s,...i];return Lt(t,{remove:o,insert:c,reset:!1})}(r,t,e)},r.src=e,r}class St{constructor(t,e={}){this._layer=t,this._nearby=void 0,this._segment=void 0,this._options=e}get src(){return this._layer}get segment(){return this._segment}query(t){if(null==this._nearby||!m.covers_endpoint(this._nearby.itv,t)){this._nearby=this._layer.index.nearby(t);let{itv:e,center:n}=this._nearby;this._segments=n.map((t=>It(e,t)))}const e=this._segments.map((e=>e.query(t)));return D(this._segments,e,t,this._layer.options)}clear(){this._nearby=void 0,this._segment=void 0}}function Lt(t,e={}){if(tt(t.src))return t.src.update(e);if(nt(t.src)){let{insert:n=[],remove:r=[],reset:i=!1}=e;if(i)return t.src.set(n);{const e=new Map((t.src.get()||[]).map((t=>[t.id,t])));r.forEach((t=>e.delete(t))),n.forEach((t=>e.set(t.id,t)));const i=Array.from(e.values());return t.src.set(i)}}}function Nt(t){return t instanceof Y&&null==t.ctrl&&null==t.src}function qt(t=Q){if(!K(t))throw new Error(`src must be clockProvider ${t}`);const e=new Y;return e.query=function(e){return{value:t.now(e),dynamic:!0,offset:e}},e}const Ft=U.check_range;function Pt(t,e,n={}){const r=new Y;let i,s;return ot(r),ct(r),r.srcprop_register("ctrl"),r.srcprop_register("src"),r.srcprop_check=function(t,e=Q){if("ctrl"==t){if(K(e)&&(e=qt(e)),!Nt(e))throw new Error(`"ctrl" property must be a clock cursor ${e}`);return e}if("src"==t){if((tt(e)||nt(e))&&(e=Ct({src:e})),!kt(e))throw new Error(`"src" property must be an item layer ${e}`);return e}},r.srcprop_onchange=function(t,e){null!=r.src&&null!=r.ctrl&&("src"==t&&("reset"==e?i=r.src.createCache():i.clear()),function(){s&&s.cancel();const t=r.ctrl.value,e=r.src.index.nearby(t).itv[1]||1/0;if(e==1/0)return;s=T((()=>{r.onchange()}),1e3*(e-t))}(),r.onchange())},r.query=function(t){const e=r.ctrl.query(t).value;return i.query(e)},r.set=function(t){return function(t,e){let n=[];null!=e&&(n=[{id:W(10),itv:[null,null,!0,!0],type:"static",data:e}]);return Mt(t,n)}(r,t)},r.motion=function(t){return function(t,e={}){let{value:n,offset:r}=t.query();"number"==typeof n&&isFinite(n)||(n=0);const{position:i=n,velocity:s=0,acceleration:o=0,timestamp:c=r,range:l=[null,null]}=e;Ft(l),A("position",i),A("velocity",s),A("acceleration",o),A("timestamp",c);const u=[],a=(0,U.calculate_time_ranges)([i,s,o,c],l),h=t.ctrl.value,f=a.find((t=>{const e=t[0]??-1/0,n=t[1]??1/0;return e<=h&&h<=n}));if(null!=f){const[t,e]=f;u.push({id:W(10),itv:[t,e,!0,!0],type:"motion",data:[i,s,o,c]}),null!=t&&u.push({id:W(10),itv:[null,t,!0,!1],type:"static",data:l[0]}),null!=e&&u.push({id:W(10),itv:[e,null,!1,!0],type:"static",data:l[1]})}else{const t=i<l[0]?l[0]:l[1];u.push({id:W(10),itv:[null,null,!0,!0],type:"static",data:t})}return Mt(t,u)}(r,t)},r.transition=function({target:t,duration:e,easing:n}){return function(t,e,n,r){const{value:i,offset:s}=t.query(),o=e,c=s+n;A("position",i),A("position",o),A("position",s),A("position",c);let l=[{id:W(10),itv:[null,s,!0,!1],type:"static",data:i},{id:W(10),itv:[s,c,!0,!0],type:"transition",data:{v0:i,v1:o,t0:s,t1:c,easing:r}},{id:W(10),itv:[c,null,!1,!0],type:"static",data:o}];return Mt(t,l)}(r,t,e,n)},r.interpolate=function({tuples:t,duration:e}){return function(t,e,n){const r=t.ctrl.value;e=e.map((([t,e])=>(A("ts",e),A("val",t),[t,r+e])));const i=It([null,null,!0,!0],{type:"interpolation",data:e}),s=r,o=s+n,c=i.state(s).value,l=i.state(o).value,u=[{id:W(10),itv:[-1/0,s,!0,!1],type:"static",data:c},{id:W(10),itv:[s,o,!0,!1],type:"interpolation",data:e},{id:W(10),itv:[o,1/0,!0,!0],type:"static",data:l}];return Mt(t,u)}(r,t,e)},r.options=n,r.ctrl=t,r.src=e,r}function Mt(t,e){const{record:n=!1}=t.options;return n?t.src.append(e,t.ctrl.value):t.src.update({insert:e,reset:!0})}function At(t,e){const n=new Y;let r,i,s;function o(){n.onchange(),function(){i&&i.cancel();s&&clearInterval(s);const t=X(n),e=t.value,r=t.offset;if(!t.dynamic)return;const c=n.src.index.nearby(e),l=c.itv[0]??-1/0,u=c.itv[1]??1/0;if(l==-1/0&&u==1/0)return;if(Nt(n.ctrl)){return void(i=T((()=>{o()}),1e3*(u-e)))}if(Nt(n.ctrl.ctrl)&&kt(n.ctrl.src)){const t=n.ctrl.src.get_items(r);let s;if(1==t.length){const n=t[0];if("motion"==n.type){const[t,r,c,a]=n.data;if(0==c){s=r>0?u:l;return void(i=T((()=>{o()}),1e3*(s-e)))}}else if("transition"==n.type){const{v0:t,v1:r,t0:c,t1:a,easing:h="linear"}=n.data;if("linear"==h){s=(r-t)/(a-c)>0?Math.min(u,r):Math.max(l,r);return void(i=T((()=>{o()}),1e3*(s-e)))}}}}!function(t){s=setInterval((()=>{!function(t){let e=n.ctrl.value;m.covers_endpoint(t,e)||o()}(t)}),100)}(c.itv)}()}return ot(n),ct(n),n.srcprop_register("ctrl"),n.srcprop_register("src"),n.srcprop_check=function(t,e=Q){if("ctrl"==t){if(K(e)&&(e=qt(e)),e instanceof Y)return e;throw new Error(`ctrl must be clockProvider or Cursor ${e}`)}if("src"==t){if((tt(e)||nt(e))&&(e=Ct({src:e})),e instanceof V)return e;throw new Error(`src must be Layer ${e}`)}},n.srcprop_onchange=function(t,e){null!=n.src&&null!=n.ctrl&&("src"==t&&("reset"==e?r=n.src.createCache():r.clear()),o())},n.query=function(t){const e=X(n,t).value;return r.query(e)},n.ctrl=t,n.src=e,n}class Ht extends v{constructor(t){super(),this._cursor=t}nearby(t){return{itv:[null,null,!0,!0],center:[this._cursor],left:g.NEG_INF,prev:g.NEG_INF,right:g.POS_INF,next:g.POS_INF}}}const Gt={sum:{valueFunc:function(t){return t.states.map((t=>t.value)).reduce(((t,e)=>t+e),0)}},stack:{stateFunc:function(t){return{...t.states[0]}}},array:{valueFunc:function(t){return t.states.map((t=>t.value))}}};function Dt(t,e){return g.cmp(t,e)}function Wt(t,e){return g.cmp(e,t)}class Tt extends v{constructor(t){super(),this._sources=t,this._caches=new Map(t.map((t=>[t,t.createCache()])))}nearby(t){t=g.from_input(t);const e=[],n=[],r=[],i=[],s=[];for(let o of this._sources){let c=o.index.nearby(t),l=o.index.find_region(c,{direction:-1}),u=o.index.find_region(c,{direction:1});if(null!=l&&e.push(g.from_interval(l.itv)[1]),null!=u&&n.push(g.from_interval(u.itv)[0]),c.center.length>0){r.push(this._caches.get(o));let[t,e]=g.from_interval(c.itv);i.push(e),s.push(t)}}n.sort(Dt);const o=n[0]||g.POS_INF;e.sort(Wt);return E(e[0]||g.NEG_INF,s,r,i,o)}}class jt extends v{constructor(t,e={}){super(),this._index=t;let{condition:n=t=>t.length>0}=e;this._condition=n}nearby(t){t=g.from_input(t);const e=this._index.nearby(t);let n=this._condition(e.center);const r=t=>this._condition(t)!=n;let i,s,o=this._index.find_region(e,{direction:1,condition:r});null!=o&&(i=g.from_interval(o.itv)[0]);let c=this._index.find_region(e,{direction:-1,condition:r});null!=c&&(s=g.from_interval(c.itv)[1]),s=s||g.NEG_INF,i=i||g.POS_INF;const l=g.flip(s),u=g.flip(i);return{itv:m.from_endpoints(l,u),center:[(a=n,{query:function(t){return{value:a,dynamic:!1,offset:t}}})],left:s,right:i};var a}}function zt(t){if(!(t instanceof V))throw new Error(`must be layer ${t}`);return{eval:function(e){for(let n of e)if(n.src==t)return!0;return!1}}}function Ut(t,{shift:e=0,scale:n=1}){if(null==t||!isFinite(t))return t;if("number"==typeof t)return t*n+e;if(Array.isArray(t)&&t.length>1){let[r,i]=t;return g.from_input([r*n+e,i])}}function Vt(t,{shift:e=0,scale:n=1}){if(null==t||!isFinite(t))return t;if("number"==typeof t)return(t-e)/n;if(Array.isArray(t)&&t.length>1){let[r,i]=t;return g.from_input([(r-e)/n,i])}}zt.and=function(...t){return{eval:function(e){return t.every((t=>t.eval(e)))}}},zt.or=function(...t){return{eval:function(e){return t.some((t=>t.eval(e)))}}},zt.xor=function(t,e){return{eval:function(n){return t.eval(n)!=e.eval(n)}}},zt.not=function(t){return{eval:function(e){return!t.eval(e)}}};class Bt extends v{constructor(t,e={}){super(),this._layer=t,this._cache=t.createCache(),this._options=e,this._transform_cache={query:function(t){return{...this._cache.query(Vt(t,this._options)),offset:t}}.bind(this)}}nearby(t){t=g.from_input(t);const e=this._layer.index.nearby(Vt(t,this._options)),n=e.itv.slice();return n[0]=Ut(e.itv[0],this._options),n[1]=Ut(e.itv[1],this._options),{itv:n,left:Ut(e.left,this._options),right:Ut(e.right,this._options),center:e.center.map((()=>this._transform_cache))}}}function Jt(t,e={}){if(!(t instanceof Y))throw new Error(`src must be a Cursor ${t}`);const n=new Y;return n.query=function(){return function(t,e={}){const{valueFunc:n,stateFunc:r}=e;return null!=n?(t.value=n(t.value),t):null!=r?r(t):t}(t.query(),e)},Nt(t)||(n.ctrl=t.ctrl,n.ctrl.add_callback((()=>{n.onchange()}))),Nt(t)||(n.src=t.src),t.add_callback((()=>{n.onchange()})),n}function Rt(t=Q,e,n){if(K(t)&&(t=qt(t)),!Nt(t)&&!Nt(t.ctrl))throw new Error(`ctrl or ctrl.ctrl must be a clock cursor ${t}`);if(!(e instanceof Y))throw new Error(`src must be a cursor ${e}`);if(Nt(e))throw new Error(`src can not be a clock cursor ${e}`);if(!kt(e.src))throw new Error(`cursor src must be itemslayer ${e.src}`);if(!kt(n))throw new Error(`dst must be a itemslayer ${n}`);const r=e.src.src,i=n.src;if(r===i)throw new Error("src and dst can not have the same stateProvider");let s=!1;function o(){const e=s;if(s=!1,Nt(t))s=!0;else if(Nt(t.ctrl)){const e=t.ctrl.value,n=t.src.index.nearby(e).center;if(1==n.length&&"motion"==n[0].type){const[t,e,r,i]=n[0].data;(e>0||0==e&&r>0)&&(s=!0)}}!e&&s?(console.log("start recording"),c()):e&&!s&&function(){console.log("stop recording");const e=H.now(),r=t.query(e).value,i=n.index.nearby(r).center,s=i.map((t=>{const e={...t};return e.itv[1]=r,e.itv[3]=!1,e}));i.length>0&&n.update({insert:s,reset:!1})}()}function c(){console.log("record");const i=H.now(),s=e.query(i).offset,o=t.query(i).value;let c=r.get();const l=o-s;if(0!=l){const t=c.map((t=>function(t,e){t={...t},t.itv[0]=null!=t.itv[0]?t.itv[0]+e:null,t.itv[1]=null!=t.itv[1]?t.itv[1]+e:null,"motion"==t.type?t.data.timestamp=t.data.timestamp+e:"transition"==t.type&&(t.data.t0=t.data.t0+e,t.data.t1=t.data.t1+e);return t}(t,l)));n.append(t,o)}else n.append(c,s)}return r.add_callback((function(){s&&c()})),t.add_callback(o),o(),{}}function Xt(t,e){const n=t.id,r=t.type;let i="";if(null!=t.itv){const[e,n,r,s]=t.itv;i=`[${null==e?"null":e.toFixed(2)},${null==n?"null":n.toFixed(2)},${r},${s}]`}let s=`<span class="item-id">${n}</span>`,o=`<span class="item-itv">${i}</span>`,c=`<span class="item-type">${r}</span>`,l=`<span class="item-data">${JSON.stringify(t.data)}</span>`;const{delete_allowed:u=!1}=e;return u?`\n        <div>\n            <button id="delete">X</button>\n            ${s}: ${c} ${o} ${l}\n        </div>`:`\n        <div>\n            ${s}: ${c} ${o} ${l}\n        </div>`}class Yt{constructor(t,e,n={}){this._sp=t,this._elem=e,this._handle=this._sp.add_callback(this._onchange.bind(this));let r={toString:Xt};this._options={...r,...n},this._options.delete_allowed&&e.addEventListener("click",(t=>{const e=t.target.closest("#delete");if(e){const n=e.closest(".list-item");n&&(this._sp.update({remove:[n.id]}),t.stopPropagation())}})),this._onchange()}_onchange(){const t=this._sp.get()||[];t.sort(((t,e)=>{let n=g.from_interval(t.itv)[0],r=g.from_interval(e.itv)[0];return g.cmp(n,r)})),this._elem.replaceChildren();const{toString:e}=this._options;for(let n of t){let t=this._elem.querySelector(`#${n.id}`);null==t&&(t=document.createElement("div"),t.setAttribute("id",n.id),t.classList.add("list-item"),this._elem.appendChild(t)),t.innerHTML=e(n,this._options)}}}function Kt(t={}){let{src:e,insert:n,value:r,...i}=t;return e instanceof V?e:(null==e&&(e=null!=r?new rt({value:r}):new et({insert:n})),Ct({src:e,...i}))}return t.Cursor=Y,t.Layer=V,t.NearbyIndexBase=v,t.boolean=function(t){const e=new V;return e.index=new jt(t.index),t.add_callback((t=>{e.onchange(t)})),e.src=t,e},t.clock=function(t){return qt(t)},t.cursor_transform=Jt,t.layer=Kt,t.layer_from_cursor=function(t){if(!(t instanceof Y))throw new Error(`src must be a Cursor ${t}`);const e=new V;return e.index=new Ht(t),t.add_callback((t=>{e.onchange(t)})),e.src=t,e},t.layer_transform=function(t,e={}){if(!(t instanceof V))throw new Error(`src must be a Layer ${t}`);const n={};var r,i;n.valueFunc=(r=e.valueFunc,function({sources:t,states:e,offset:n}){return r(e[0].value)}),n.stateFunc=(i=e.stateFunc,function({sources:t,states:e,offset:n}){return i(e[0])});const s=new V(n);return s.index=new x(t),s.src=t,s.src.add_callback((t=>{s.onchange(t)})),s},t.local_clock=H,t.logical_expr=zt,t.logical_merge=function(t,e={}){const{expr:n}=e;let r;n&&(r=t=>n.eval(t));const i=new V,s=new Tt(t);return i.index=new jt(s,{condition:r}),t.map((t=>t.add_callback(i.onchange))),i.sources=t,i},t.merge=function(t,e={}){let{type:n="",...r}=e;n in Gt&&(r=Gt[n]);const i=new V(r);return ot(i),ct(i),i.srcprop_register("sources"),i.srcprop_check=function(t,e){if("sources"==t){if(!Array.isArray(e))throw new Error(`sources must be array ${e}`);if(!e.map((t=>t instanceof V)).every((t=>t)))throw new Error(`sources must all be layers ${e}`)}return e},i.srcprop_onchange=function(t,e){"sources"==t&&("reset"==e&&(i.index=new Tt(i.sources)),i.onchange())},i.sources=t,i},t.playback=function(t={}){let{ctrl:e,...n}=t;return At(e,Kt(n))},t.recorder=function(t={}){let{ctrl:e=Q,src:n,dst:r}=t;return Rt(e,n,r)},t.render_cursor=function(t,e,n={}){const{delay:r=200,render:i,novalue:s}=n,o=document.querySelector(e);return t.bind((function(t){null==t.value&&null!=s&&(t.value=s),null!=i?i(t,o):o.textContent=null!=t.value?`${t.value}`:""}),r)},t.render_provider=function(t,e,n={}){const r=document.querySelector(e);return new Yt(t,r,n)},t.skew=function(t,e){return Jt(t,{valueFunc:function(t){return t+e}})},t.timeline_transform=function(t,e={}){const n=new V;return ot(n),ct(n),n.srcprop_register("src"),n.srcprop_check=function(t,e){if("src"==t){if(!(e instanceof V))throw new Error(`"src" must be Layer ${e}`);return e}},n.srcprop_onchange=function(t,r){"src"==t&&("reset"==r&&(this.index=new Bt(this.src,e)),n.onchange())},n.src=t,n},t.variable=function(t={}){let{clock:e,...n}=t;return Pt(e,Kt(n))},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
