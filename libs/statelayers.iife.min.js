var STATELAYERS=function(t){"use strict";function e(t){return"number"==typeof t}const n=Object.freeze({HIGH_OPEN:")",HIGH_CLOSED:"]",VALUE:"",LOW_CLOSED:"[",LOW_OPEN:"("});const r=new Map([[n.HIGH_OPEN,-1],[n.HIGH_CLOSED,0],[n.VALUE,0],[n.LOW_CLOSED,0],[n.LOW_OPEN,1]]);function i(t){return t[1]==n.LOW_CLOSED||t[1]==n.LOW_OPEN}function s(t){if(Array.isArray(t)||(t=[t,n.VALUE]),2!=t.length)throw new Error("Endpoint must be a length-2 array",t);let[r,i]=t;if(s=i,!Object.values(n).includes(s))throw new Error("Unsupported endpoint type",i);var s;if(r==-1/0)return[null,n.LOW_CLOSED];if(r==1/0)return[null,n.HIGH_CLOSED];if(null==r||null==r||e(r))return[r,i];throw new Error("endpoint must be null or number",r)}const o=s(1/0),c=s(-1/0);function l(t){return null!=t[0]?[t[0],t[1]]:i(t)?[-1/0,n.LOW_CLOSED]:[1/0,n.HIGH_CLOSED]}function u(t,e){return t<e?-1:t>e?1:0}function a(t,e){const[n,i]=l(t),[s,o]=l(e),c=u(n,s);if(0==c){return u(r.get(i),r.get(o))}return c}function h(t,e){return a(t,e)<=0}function f(t,e){return a(t,e)>=0}function _(t,e){return 0==a(t,e)}function d(t){const[e,r,i,o]=t,c=i?n.LOW_CLOSED:n.LOW_OPEN,l=o?n.HIGH_CLOSED:n.HIGH_OPEN;return[s([e,c]),s([r,l])]}function p(t,e){const[n,r]=d(t);return h(n,e=s(e))&&h(e,r)}const m={le:h,lt:function(t,e){return a(t,e)<0},ge:f,gt:function(t,e){return a(t,e)>0},cmp:a,eq:_,min:function(t,e){return h(t,e)?t:e},max:function(t,e){return f(t,e)?t:e},flip:function(t,e){if(e)throw new Error("target is deprecated");let[r,i]=t;if(null==r)return t;if(i==n.HIGH_OPEN)return[r,n.LOW_CLOSED];if(i==n.HIGH_CLOSED)return[r,n.LOW_OPEN];if(i==n.LOW_OPEN)return[r,n.HIGH_CLOSED];if(i==n.LOW_CLOSED)return[r,n.HIGH_OPEN];throw new Error("illegal endpoint type",i)},from_interval:d,from_input:s,types:{...n},POS_INF:o,NEG_INF:c},g={covers_endpoint:p,covers_point:function(t,e){return p(t,e)},is_singular:function(t){const[e,n]=d(itv);return _(e,n)},from_endpoints:function(t,e){let[r,s]=t,[o,c]=e;if(!i(t))throw new Error("illegal low endpoint",t);if((l=e)[1]!=n.HIGH_CLOSED&&l[1]!=n.HIGH_OPEN)throw new Error("illegal high endpoint",e);var l;return[r,o,s==n.LOW_CLOSED,c==n.HIGH_CLOSED]},from_input:function(t){let n=t;if(null==n||null==n)throw new Error("input is undefined");if(!Array.isArray(n)){if(!e(n))throw new Error(`input: ${t}: must be Array or Number`);n=[n,n,!0,!0]}1==n.length?n=[n[0],n[0],!0,!0]:2==n.length?n=[n[0],n[1],!0,!1]:3==n.length?n=[n[0],n[1],n[2],!1]:n.length>4&&(n=[n[0],n[1],n[2],n[4]]);let[r,i,s,o]=n;if(null!=r&&r!=-1/0||(r=null),null!=i&&i!=1/0||(i=null),null==r)s=!0;else if(!e(r))throw new Error("low not a number",r);if(null==i)o=!0;else if(!e(i))throw new Error("high not a number",i);if(null!=r&&null!=i){if(r>i)throw new Error("low > high",r,i);r==i&&(s=!0,o=!0)}if("boolean"!=typeof s)throw new Error("lowInclude not boolean");if("boolean"!=typeof o)throw new Error("highInclude not boolean");return[r,i,s,o]}};class v{nearby(t){throw new Error("Not implemented")}empty(){return null==this.first()}first(){let{center:t,right:e}=this.nearby(m.NEG_INF);return t.length>0?m.NEG_INF:m.lt(e,m.POS_INF)?e:void 0}last(){let{left:t,center:e}=this.nearby(m.POS_INF);return e.length>0?m.POS_INF:m.gt(t,m.NEG_INF)?t:void 0}right_region(t){const e=function(t){const e=m.from_interval(t.itv)[1];return m.flip(e)}(t);if(null!=e[0])return this.nearby(e)}left_region(t){const e=function(t){const e=m.from_interval(t.itv)[0];return m.flip(e)}(t);if(null!=e[0])return this.nearby(e)}find_region(t,e={}){let n,{direction:r=1,condition:i=t=>t.length>0}=e;for(;;){if(n=1==r?this.right_region(t):this.left_region(t),null==n)return;if(i(n.center))return n;t=n}}regions(t){return new y(this,t)}}class y{constructor(t,e={}){let{start:n=-1/0,stop:r=1/0,includeEmpty:i=!0}=e;if(n>r)throw new Error("stop must be larger than start",n,r);this._index=t,this._start=m.from_input(n),this._stop=m.from_input(r),this._condition=i?()=>!0:t=>t.length>0,this._current}next(){if(null==this._current&&(this._current=this._index.nearby(this._start),this._condition(this._current.center)))return{value:this._current,done:!1};let t={condition:this._condition,direction:1};return this._current=this._index.find_region(this._current,t),null==this._current?{value:void 0,done:!0}:{value:this._current,done:!1}}[Symbol.iterator](){return this}}function b(t,e){return m.cmp(t,e)}function w(t,e){return m.cmp(e,t)}function O(t,e,n,r,i){const s={center:n};if(0==n.length)s.right=i,s.left=t;else{r.sort(b);let n=r[0],o=r.slice(-1)[0],c=!m.eq(n,o);e.sort(w);let l=e[0],u=e.slice(-1)[0],a=!m.eq(l,u);m.le(i,n)?s.right=i:s.right=m.flip(n),s.next=c?s.right:i,m.ge(t,l)?s.left=t:s.left=m.flip(l),s.prev=a?s.left:t}let o=m.flip(s.left),c=m.flip(s.right);return s.itv=g.from_endpoints(o,c),s}class E extends v{constructor(t){super(),this._src=t,this._cache=t.createCache()}nearby(t){const e=this._src.index.nearby(t);return e.center=[this._cache],e}}class x{constructor(t,e,n){n=n||{},this.publisher=t,this.name=e,this.init=void 0!==n.init&&n.init,this.subscriptions=[]}subscribe(t,e){if(!t||"function"!=typeof t)throw new Error("Callback not a function",t);const n=new $(this,t,e);if(this.subscriptions.push(n),this.init&&n.init){n.init_pending=!0;let t=this;Promise.resolve().then((function(){const e=t.publisher.eventifyInitEventArgs(t.name)||[];n.init_pending=!1;for(let r of e)t.trigger(r,[n],!0)}))}return n}trigger(t,e,n){let r,i;for(const s of e)if(!s.terminated){r={src:this.publisher,name:this.name,sub:s,init:n},i=s.ctx||this.publisher;try{s.callback.call(i,t,r)}catch(t){console.log(`Error in ${this.name}: ${s.callback} ${t}`)}}}unsubscribe(t){let e=this.subscriptions.indexOf(t);e>-1&&(this.subscriptions.splice(e,1),t.terminate())}}class ${constructor(t,e,n){n=n||{},this.event=t,this.name=t.name,this.callback=e,this.init=void 0===n.init?this.event.init:n.init,this.init_pending=!1,this.terminated=!1,this.ctx=n.ctx}terminate(){this.terminated=!0,this.callback=void 0,this.event.unsubscribe(this)}}function k(t){return t.__eventify_eventMap=new Map,t.__eventify_buffer=[],t}function F(t){function e(t,e){const n=t.__eventify_eventMap.get(e);if(null==n)throw new Error("Event undefined",e);return n}t.eventifyDefine=function(t,e){if(this.__eventify_eventMap.has(t))throw new Error("Event already defined",t);this.__eventify_eventMap.set(t,new x(this,t,e))},t.eventifyTrigger=function(t,e){return this.eventifyTriggerAll([{name:t,eArg:e}])},t.eventifyTriggerAlike=function(t,e){return this.eventifyTriggerAll(e.map((e=>({name:t,eArg:e}))))},t.eventifyTriggerAll=function(t){if(0==t.length)return;let n=t.map((t=>{let{name:n,eArg:r}=t,i=e(this,n),s=i.subscriptions.filter((t=>0==t.init_pending));return[i,r,s]}),this);const r=n.length,i=this.__eventify_buffer,s=this.__eventify_buffer.length;this.__eventify_buffer.length=s+r;for(let t=0;t<r;t++)i[s+t]=n[t];if(0==s){let t=this;Promise.resolve().then((function(){for(let[e,n,r]of t.__eventify_buffer)e.trigger(n,r,!1);t.__eventify_buffer=[]}))}},t.eventifySubscriptions=function(t){return e(this,t).subscriptions},t.on=function(t,n,r){return e(this,t).subscribe(n,r)},t.off=function(t){return e(this,t.name).unsubscribe(t)}}F(class{constructor(t){k(this),this._value=t,this.eventifyDefine("change",{init:!0})}eventifyInitEventArgs(t){if("change"==t)return[this._value]}get value(){return this._value}set value(t){t!=this._value&&(this._value=t,this.eventifyTrigger("change",t))}}.prototype);const I="__callback";function P(t){t[`${I}_handlers`]=[]}function N(t){let e={handler:t};return this[`${I}_handlers`].push(e),e}function C(t){let e=this[`${I}_handlers`].indexOf(t);e>-1&&this[`${I}_handlers`].splice(e,1)}function S(t){this[`${I}_handlers`].forEach((function(e){e.handler(t)}))}function L(t){const e={add_callback:N,remove_callback:C,notify_callbacks:S};Object.assign(t,e)}function q(t){if(null==t)return!1;const e=["add_callback","remove_callback"];for(const n of e){if(!(n in t))return!1;if("function"!=typeof t[n])return!1}return!0}function A(t){return"number"==typeof t&&isFinite(t)}function H(t,e){if(!A(e))throw new Error(`${t} must be finite number ${e}`)}const M={now:()=>performance.now()/1e3};function j(t,e,n,r={}){let i,{valueFunc:s,stateFunc:o,numeric:c=!1,mask:l}=r;if(null!=s){i={value:s({sources:t,states:e,offset:n}),dynamic:e.map((t=>t.dymamic)).some((t=>t)),offset:n}}else i=null!=o?{...o({sources:t,states:e,offset:n}),offset:n}:0==e.length?{value:void 0,dynamic:!1,offset:n}:{...e[0],offset:n};return c&&null!=i.value&&(A(i.value)||(i={value:l,dynamic:!1,offset:n})),i}function G(t){if(!Array.isArray(t))throw new Error("Input must be an array");for(const e of t)e.id=e.id||D(10),e.itv=g.from_input(e.itv);return t}function D(t){for(var e="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",r=0;r<t;r++)e+=n.charAt(Math.floor(52*Math.random()));return e}function R(t,e){const[n,r,i,s]=t;return Math.pow(r,2)-2*i*(n-e)>=0}function W(t,e){const[n,r,i,s]=t;if(0===i&&0===r)return n!=e?[]:void 0;if(0===i)return[s+(e-n)/r];if(!1===R(t,e))return[];if(0===Math.pow(r,2)-2*i*(n-e))return[s-r/i];var o=Math.sqrt(Math.pow(r,2)-2*i*(n-e)),c=s+(-r+o)/i,l=s+(-r-o)/i;return[Math.min(c,l),Math.max(c,l)]}const T={calculate:function(t,e){const[n,r,i,s]=t,o=e-s;return[n+r*o+.5*i*Math.pow(o,2),r+i*o,i,e]},has_real_solutions:R,get_real_solutions:W,calculate_time_ranges:function(t,e){const[n,r,i,s]=t;let[o,c]=e;if(null==o&&(o=-1/0),null==c&&(c=1/0),o==-1/0&&c==1/0)return[[null,null]];if(0===r&&0===i)return n>=o&&n<=c?[[null,null]]:[];let l=[];if(-1/0<o&&l.push(...W(t,o)),c<1/0&&l.push(...W(t,c)),l=[...new Set(l)],l.sort(((t,e)=>t-e)),o==-1/0){if(0==l.length)return n<=c?[[null,null]]:[];if(1==l.length)return i>0?[]:i<0?[[null,null]]:r>0?[[null,l[0]]]:[[l[0],null]];if(2==l.length){if(i>0)return[[l[0],l[1]]];if(i<0)return[[null,l[0]],[l[1],null]]}}else if(c==1/0){if(0==l.length)return n>=o?[[null,null]]:[];if(1==l.length)return i>0?[[null,null]]:i<0?[]:r>0?[[l[0],null]]:[[null,l[0]]];if(2==l.length){if(i>0)return[[null,l[0]],[l[1],null]];if(i<0)return[[l[0],l[1]]]}}else{if(0==l.length)return[];if(1==l.length)return[];if(2==l.length)return[[l[0],l[1]]];if(3==l.length)return[[l[0],l[2]]];if(4==l.length)return[[l[0],l[1]],[l[2],l[3]]]}},check_range:function(t){if(Array.isArray(t)&&2!=t.length)throw new Error(`range must have two elements ${t}`);null==t[0]||H("low",t[0]),null==t[1]||H("high",t[1])}};class z{constructor(t={}){const{CacheClass:e=U,valueFunc:n,stateFunc:r}=t;P(this),k(this),this.eventifyDefine("change",{init:!0}),this.index,this._CacheClass=e,this._private_cache,this._consumer_caches=[],this._valueFunc=n,this._stateFunc=r}get numeric(){return!1}get mutable(){return!1}get itemsOnly(){return!1}get valueFunc(){return this._valueFunc}get stateFunc(){return this._stateFunc}get cache(){return null==this._private_cache&&(this._private_cache=new this._CacheClass(this)),this._private_cache}query(t){return this.cache.query(t)}createCache(){const t=new this._CacheClass(this);return this._consumer_caches.push(t),t}releaseCache(t){const e=this._consumer_caches.indexOf(t);e>-1&&this._consumer_caches.splice(e,1)}clearCaches(){for(const t of this._consumer_caches)t.clear();null!=this._private_cache&&this._private_cache.clear()}onchange(){this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change")}regions(t){return this.index.regions(t)}sample(t={}){if(this.index.empty())return[];let{start:e,stop:n,step:r=1}=t;if(null==e){const t=this.index.first();if(null==t[0])throw new Error("undefined start");e=t[0]}if(null==n){const t=this.index.last();if(null==t[0])throw new Error("undefined stop");n=t[0]}if(e>n)throw new Error("stop must be larger than start",e,n);const i=this.createCache(),s=function(t,e,n=1,r={}){const i=[],{include_end:s=!1}=r;if(0===n)throw new Error("Step cannot be zero.");if(t<e)for(let r=t;r<e;r+=n)i.push(r);else if(t>e)for(let r=t;r>e;r-=n)i.push(r);return s&&i.push(e),i}(e,n,r,{include_end:!0}).map((t=>[i.query(t).value,t]));return this.releaseCache(i),s}}L(z.prototype),F(z.prototype);class U{constructor(t){this._layer=t,this._nearby,this._state,this._query_options={valueFunc:this._layer.valueFunc,stateFunc:this._layer.stateFunc,numberOnly:this._layer.isNumberOnly}}get layer(){return this._layer}query(t){const e=null==this._nearby||!g.covers_endpoint(this._nearby.itv,t);if(!e&&null!=this._state&&!this._state.dynamic)return{...this._state,offset:t};e&&(this._nearby=this._layer.index.nearby(t));const n=this._nearby.center.map((e=>e.query(t))),r=j(this._nearby.center,n,t,this._query_options);return this._state=r.dynamic?void 0:r,r}clear(){this._nearby=void 0,this._state=void 0}}class V{constructor(t){this._callback=t,this._handle,this._delay}set delay(t){if("number"!=typeof t)throw new Error(`delay must be a number ${t}`);this._delay!=t&&(this._delay=t)}get delay(){return this._delay}is_polling(){return null!=this._handle}pause(){null!=this._handle&&(this._handle.cancel(),this._handle=void 0)}poll(){this._callback(),this.pause(),this.resume()}resume(){if(null==this._handle)if(0==this._delay){const t=requestAnimationFrame(this.poll.bind(this));this._handle={cancel:()=>cancelAnimationFrame(t)}}else{const t=setTimeout(this.poll.bind(this),this._delay);this._handle={cancel:()=>clearTimeout(t)}}}}const B=new class{constructor(){this._binding_set=new Set,this._cursor_map=new Map,this._poller=new V(this.onpoll.bind(this))}bind(t,e,n){if(null==n)n=0;else if("number"!=typeof n)throw new Error(`delay must be a number ${n}`);let r={cursor:t,callback:e,delay:n};if(this._binding_set.add(r),this._cursor_map.has(t))this._cursor_map.get(t).bindings.push(r);else{let e=t.on("change",this.oncursorchange.bind(this));this._cursor_map.set(t,{sub:e,polling:!1,bindings:[r]})}return r}release(t){if(!this._binding_set.delete(t))return;const e=t.cursor,{sub:n,bindings:r}=this._cursor_map.get(e),i=r.indexOf(t);i>=0&&r.splice(i,1),0==r.length&&(e.off(n),this._cursor_map.delete(e))}oncursorchange(t,e){const n=e.src,r=t;this._cursor_map.get(n).polling=r.dynamic;const i=[...this._cursor_map.values()].filter((t=>t.polling));this.reevaluate_polling(i);const{bindings:s}=this._cursor_map.get(n);for(const t of s)t.callback(r)}onpoll(){const t=M.now();for(const[e,n]of this._cursor_map)if(n.polling){const r=e.query(t);for(const t of n.bindings)t.callback(r)}}reevaluate_polling(t){if(0==t.length)this._poller.pause();else{const e=[];for(const n of t)for(const t of n.bindings)e.push(t.delay);const n=Math.min(...e);this._poller.delay=n,this._poller.pause(),this._poller.resume()}}};class J{constructor(){P(this),k(this),this.eventifyDefine("change",{init:!0})}get mutable(){return!1}get numeric(){return!1}get itemsOnly(){return!1}get fixedRate(){return!1}query(t){throw new Error("query() not implemented")}get value(){return this.query().value}get(){return this.query().value}eventifyInitEventArgs(t){if("change"==t)return[this.query()]}bind(t,e,n={}){return function(t,e,n){return B.bind(t,e,n)}(this,t,e)}release(t){return e=t,B.release(e);var e}onchange(){this.notify_callbacks(),this.eventifyTrigger("change",this.query()),this.detect_future_event()}detect_future_event(){}}L(J.prototype),F(J.prototype);class X{constructor(t={}){const{clock:e,vector:n=Y}=t;if(void 0!==e&&("now"in(r=e)&&"function"==typeof r.now))this._clock={now:t=>{const n=null!=t?M.now()-t:0;return e.now()-n}},this._rate=1;else{let{ts:t,value:e,rate:r=1}=n;null==t&&(t=M.now()),H("ts",t),H("value",e),H("rate",r),this._t0=t,this._value=e,this._rate=r,this._clock={now:(t=M.now())=>this._value+(t-this._t0)*this._rate}}var r}now(){return this._clock.now()}get rate(){return this._rate}}const Y={ts:M.now(),value:new Date/1e3,rate:1},K=new X({vector:Y});function Q(t){return!!q(t)&&("get"in t&&("function"==typeof t.get&&("update"in t&&"function"==typeof t.update)))}class Z{constructor(t={}){P(this),this._map=new Map;let{items:e}=t;if(null!=e)for(const t of e)this._map.set(t.id,t)}update(t){return Promise.resolve().then((()=>{let e;return null!=t&&(e=this._update(t),this.notify_callbacks(e)),e}))}_update(t){const e=new Map;let{insert:n=[],remove:r=[],reset:i=!1}=t;if(i){for(const[t,n]of this._map.entries())e.set(t,{id:t,new:void 0,old:n});this._map=new Map}else for(const t of r){let n=this._map.get(t);null!=n&&(e.set(n.id,{id:n.id,new:void 0,old:n}),this._map.delete(t))}for(let t of n){const n=e.get(t.id),r=null!=n?n.old:this._map.get(t.id);e.set(t.id,{id:t.id,new:t,old:r}),this._map.set(t.id,t)}return[...e.values()]}get(){return[...this._map.values()]}}function tt(t){return!!q(t)&&("get"in t&&("function"==typeof t.get&&("set"in t&&"function"==typeof t.set)))}L(Z.prototype);class et{constructor(t={}){const{items:e}=t;P(this),this._object=e}set(t){return Promise.resolve().then((()=>{this._object=t,this.notify_callbacks()}))}get(){return this._object}}L(et.prototype);const nt="srcprop",rt=`__${nt}`;function it(t){t[`${rt}`]=new Map}function st(t){const e={};e[`${nt}_register`]=function(t,e={}){let{mutable:n=!0}=e;const r=this[`${rt}`];r.set(t,{init:!1,mutable:n,entity:void 0,handles:[]}),Object.defineProperty(this,t,{get:function(){return r.get(t).entity},set:function(e){this[`${nt}_check`]&&(e=this[`${nt}_check`](t,e)),e!=r.get(t).entity&&this[`${rt}_attach`](t,e)}})},e[`${rt}_attach`]=function(t,e){const n=this[`${rt}`].get(t);if(n.init&&!n.mutable)throw new Error(`${t} can not be reassigned`);const r=Array.isArray(e)?e:[e];if(n.handles.length>0)for(const[t,e]of Object.entries(r))q(e)&&e.remove_callback(n.handles[t]);if(n.handles=[],n.entity=e,n.init=!0,this[`${nt}_onchange`]){const e=function(e){this[`${nt}_onchange`](t,e)}.bind(this);for(const t of r)q(t)&&n.handles.push(t.add_callback(e));this[`${nt}_onchange`](t,"reset")}},Object.assign(t,e)}class ot{constructor(){this._array=[]}get size(){return this._array.length}get array(){return this._array}indexOf(t){const e=m.from_input(t);let n=0,r=this._array.length-1;for(;n<=r;){const t=Math.floor((n+r)/2);let i=this._array[t];if(m.eq(i,e))return[!0,t];m.lt(i,e)?n=t+1:r=t-1}return[!1,n]}geIndexOf(t){let[e,n]=this.indexOf(t);return n<this._array.length?n:-1}leIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n:n-1,n>=0?n:-1}gtIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n+1:n,n<this._array.length?n:-1}ltIndexOf(t){let[e,n]=this.indexOf(t);return n-=1,n>=0?n:-1}update(t=[],e=[]){let n=[];for(let e of t){let[t,r]=this.indexOf(e);t&&n.push(r)}for(let t of n)this._array[t]=void 0;let r=n.length>0,i=e.length>0;i&&function(t,e){const n=t.length,r=e.length;t.length+=r;for(let i=0;i<r;i++)t[n+i]=e[i]}(this._array,e),(r||i)&&this._array.sort(m.cmp),r&&(this._array.length-=n.length),i&&function(t){let e=0;for(;!(e+1>=t.length);)m.eq(t[e],t[e+1])?t.splice(e+1,1):e+=1}(this._array)}get_by_index(t){if(t>-1&&t<this._array.length)return this._array[t]}lookup(t){null==t&&(t=[null,null,!0,!0]);let[e,n]=m.from_interval(t),r=this.geIndexOf(e),i=this.leIndexOf(n);return-1==r||-1==i?[]:this._array.slice(r,i+1)}lt(t){return this.get_by_index(this.ltIndexOf(t))}le(t){return this.get_by_index(this.leIndexOf(t))}get(t){let[e,n]=this.indexOf(t);if(e)return this._array[n]}gt(t){return this.get_by_index(this.gtIndexOf(t))}ge(t){return this.get_by_index(this.geIndexOf(t))}}const{LOW_CLOSED:ct,LOW_OPEN:lt,HIGH_CLOSED:ut,HIGH_OPEN:at}=m.types,ht=[ct,lt,ut,at];class ft{constructor(){this._map=new Map([[ct,new Set],[lt,new Set],[ut,new Set],[at,new Set]])}add(t){const[e,n]=t;return this._map.get(n).add(e)}has(t){const[e,n]=t;return this._map.get(n).has(e)}get(t){const[e,n]=t;return this._map.get(n).get(e)}list(){const t=ht.map((t=>[...this._map.get(t).values()].map((e=>[e,t]))));return[].concat(...t)}}const _t="low",dt="active",pt="high";class mt{constructor(){this._map=new Map([[ct,new Map],[lt,new Map],[ut,new Map],[at,new Map]])}get_items_by_role(t,e){const[n,r]=t,i=this._map.get(r).get(n);return null!=i?i[e]:[]}register(t,e,n){const[r,i]=t,s=this._map.get(i);s.has(r)||s.set(r,{low:[],active:[],high:[]});const o=s.get(r),c=o[_t].length+o[pt].length==0;-1==o[n].findIndex((t=>t.id==e.id))&&o[n].push(e);const l=o[_t].length+o[pt].length==0;return c&&!l}unregister(t,e){const[n,r]=t,i=this._map.get(r),s=i.get(n);if(null!=s){const t=s[_t].length+s[pt].length==0;for(const t of[_t,dt,pt]){let n=s[t].findIndex((t=>t.id==e.id));n>-1&&s[t].splice(n,1)}const r=s[_t].length+s[pt].length==0;if(!t&&r)return i.delete(n),!0}return!1}}class gt extends v{constructor(t){if(super(),!Q(t)&&!tt(t))throw new Error(`stateProvider must be collectionProvider or variableProvider ${t}`);this._sp=t,this._initialise(),this.refresh()}get src(){return this._sp}_initialise(){this._itemsmap=new mt,this._endpoints=new ot,this._index=[]}refresh(t){const e=new ft,n=new ft;let r,i=[],s=[];if(null==t)i=this.src.get()||[],this._initialise();else for(const e of t)null!=e.new&&i.push(e.new),null!=e.old&&s.push(e.old);for(const t of s)for(const n of this._endpoints.lookup(t.itv)){this._itemsmap.unregister(n,t)&&e.add(n)}for(const t of i){const[e,i]=m.from_interval(t.itv);r=this._itemsmap.register(e,t,_t),r&&n.add(e),r=this._itemsmap.register(i,t,pt),r&&n.add(i)}this._endpoints.update(e.list(),n.list());const o=new Set;for(const t of this._endpoints.array){for(let e of this._itemsmap.get_items_by_role(t,_t))o.add(e);for(let e of o)this._itemsmap.register(t,e,dt);for(let e of this._itemsmap.get_items_by_role(t,pt))o.delete(e)}}_covers(t){const e=m.from_input(t),n=this._endpoints.le(e)||m.NEG_INF,r=this._endpoints.ge(e)||m.POS_INF;if(m.eq(n,r))return this._itemsmap.get_items_by_role(n,dt);{const t=this._itemsmap.get_items_by_role(n,dt),e=this._itemsmap.get_items_by_role(r,dt),i=new Set(t.map((t=>t.id)));return e.filter((t=>i.has(t.id)))}}nearby(t){const e=m.from_input(t);let n=this._covers(e);const r=[],i=[];for(const t of n){const[e,n]=m.from_interval(t.itv);r.push(n),i.push(e)}let s,o=e;for(;!(o=this._endpoints.lt(o)||m.NEG_INF,null==o[0]||(s=this._itemsmap.get_items_by_role(o,pt),s.length>0)););let c=e;for(;!(c=this._endpoints.gt(c)||m.POS_INF,null==c[0]||(s=this._itemsmap.get_items_by_role(c,_t),s.length>0)););return O(o,i,n,r,c)}}class vt{constructor(t){this._itv=t}get itv(){return this._itv}state(t){throw new Error("not implemented")}query(t){return g.covers_point(this._itv,t)?{...this.state(t),offset:t}:{value:void 0,dynamic:!1,offset:t}}}class yt extends vt{constructor(t,e){super(t),this._value=e}state(){return{value:this._value,dynamic:!1}}}class bt extends vt{constructor(t,e){super(t),this._vector=e}state(t){const[e,n,r,i]=T.calculate(this._vector,t);return{value:e,dynamic:0!=n||0!=r,vector:[e,n,r,i]}}}function wt(t){return Math.pow(t,2)}class Ot extends vt{constructor(t,e){super(t);let{v0:n,v1:r,easing:i}=e,[s,o]=this._itv.slice(0,2);this._dynamic=r-n!=0,this._trans=function(t){return t-=s,t/=parseFloat(o-s),"ease-in"==i?t=wt(t):"ease-out"==i?t=function(t){return 1-wt(1-t)}(t):"ease-in-out"==i&&(t=function(t){return t<.5?wt(2*t)/2:(2-wt(2*(1-t)))/2}(t)),t=Math.max(t,0),t=Math.min(t,1),n+(r-n)*t}}state(t){return{value:this._trans(t),dynamic:this._dynamic}}}class Et extends vt{constructor(t,e){super(t),this._trans=function(t){if(t.length<1)return function(){};if(1==t.length)return function(){return t[0][0]};const e=[...t].sort(((t,e)=>t[1]-e[1]));return function(t){if(t<=e[0][1]){const[n,r]=e[0],[i,s]=e[1];return n+(t-r)*(i-n)/(s-r)}if(t>=e[e.length-1][1]){const[n,r]=e[e.length-2],[i,s]=e[e.length-1];return n+(t-r)*(i-n)/(s-r)}for(let n=0;n<e.length-1;n++)if(t>=e[n][1]&&t<=e[n+1][1]){const[r,i]=e[n],[s,o]=e[n+1];return r+(t-i)*(s-r)/(o-i)}}}(e)}state(t){return{value:this._trans(t),dynamic:!0}}}function xt(t,e){let{type:n="static",data:r}=e;return"static"==n?new yt(t,r):"transition"==n?new Ot(t,r):"interpolation"==n?new Et(t,r):"motion"==n?new bt(t,r):void console.log("unrecognized segment type",n)}function $t(t={}){const{provider:e,numeric:n=!1,mutable:r=!0,mask:i,...s}=t,o=new z({CacheClass:kt,...s});return Object.defineProperty(o,"numeric",{get:()=>n}),Object.defineProperty(o,"mutable",{get:()=>r}),Object.defineProperty(o,"itemsOnly",{get:()=>!0}),null!=i&&H("mask",i),o.mask=i,it(o),st(o),o.srcprop_register("provider"),o.srcprop_check=function(t,e){if("provider"==t){if(!Q(e)&&!tt(e))throw new Error(`"obj" must collectionProvider or objectProvider ${e}`);return e}},o.srcprop_onchange=function(t,e){"provider"==t&&("reset"==e&&(Q(o.provider)||tt(o.provider))&&(o.index=new gt(o.provider)),null!=o.index&&(Q(o.provider)?o.index.refresh(e):tt(o.provider)&&o.index.refresh(),o.onchange()))},o.get_items=function(t){return[...o.index.nearby(t).center]},o.readOnly||(o.update=function(t){return Ft(o,t)},o.append=function(t,e){return function(t,e,n){const r=m.from_input(n),i=e.filter((t=>{const e=m.from_interval(t.itv)[1];return m.ge(e,r)})).map((t=>{if(g.covers_endpoint(t.itv,r)){const e={...t};return e.itv=[n,t.itv[1],!0,t.itv[3]],e}return t})),s=t.index.nearby(n).center.map((t=>{const e={...t};return e.itv=[t.itv[0],n,t.itv[2],!1],e})),o=t.provider.get().filter((t=>{const e=m.from_interval(t.itv)[0];return m.gt(e,r)})).map((t=>t.id)),c=[...s,...i];return Ft(t,{remove:o,insert:c,reset:!1})}(o,t,e)}),o.provider=e,o}class kt{constructor(t){this._layer=t,this._nearby=void 0,this._segment=void 0,this._query_options={valueFunc:this._layer.valueFunc,stateFunc:this._layer.stateFunc,numeric:this._layer.numeric,mask:this._layer.mask}}get src(){return this._layer}get segment(){return this._segment}query(t){if(null==this._nearby||!g.covers_endpoint(this._nearby.itv,t)){this._nearby=this._layer.index.nearby(t);let{itv:e,center:n}=this._nearby;this._segments=n.map((t=>xt(e,t)))}const e=this._segments.map((e=>e.query(t)));return j(this._segments,e,t,this._query_options)}clear(){this._nearby=void 0,this._segment=void 0}}function Ft(t,e={}){let{insert:n=[]}=e;if(e.insert=G(n),t.isNumberOnly)for(let t of e.insert)if(t.type??="static","static"==t.type&&!A(t.data))throw new Error(`Layer is number only, but item ${t} is not a number`);if(Q(t.provider))return t.provider.update(e);if(tt(t.provider)){let{insert:n=[],remove:r=[],reset:i=!1}=e;if(i)return t.provider.set(n);{const e=new Map((t.provider.get()||[]).map((t=>[t.id,t])));r.forEach((t=>e.delete(t))),n.forEach((t=>e.set(t.id,t)));const i=Array.from(e.values());return t.provider.set(i)}}}function It(t={}){const{ctrl:e,src:n,mutable:r=!1}=t;let i,s,o;const c=new J;function l(t,e){const[n,r,i,o]=t;if(0!=i)throw new Error("timeout not yet implemented for acceleration");if(e==1/0||e==-1/0)return;const c=(e-n)/r;if(c<=0)return console.log("Warning - timeout <= 0 - dropping",c),console.log("vector",t),void console.log("target",e);s=function(t,e){let n,r=performance.now()+(e=Math.max(e,0));return n=setTimeout((function e(){const i=r-performance.now();i>0?n=setTimeout(e,i+1):t()}),e+1),{cancel:function(){clearTimeout(n)}}}(u,1e3*c)}function u(){c.onchange()}return Object.defineProperty(c,"numeric",{get:()=>null!=c.src&&c.src.numeric}),Object.defineProperty(c,"mutable",{get:()=>null!=c.src&&(c.src.mutable&&r)}),Object.defineProperty(c,"itemsOnly",{get:()=>null!=c.src&&c.src.itemsOnly}),it(c),st(c),c.srcprop_register("ctrl"),c.srcprop_register("src"),c.srcprop_check=function(t,e){if("ctrl"==t){if(!(e instanceof J)||0==e.numeric)throw new Error(`"ctrl" property must be a numeric cursor ${e}`);return e}if("src"==t){if(!(e instanceof z))throw new Error(`"src" property must be a layer ${e}`);return e}},c.srcprop_onchange=function(t,e){null!=c.src&&null!=c.ctrl&&("src"==t&&("reset"==e?i=c.src.createCache():i.clear()),c.onchange())},c.query=function(t){let e=c.ctrl.query(t).value;H("cursor.ctrl.offset",e);const n=i.query(e);return c.src.numeric&&null==n.value&&(n.value=0),n},c.active_items=function(t){if(c.itemsOnly){const e=c.ctrl.query(t).value;return c.src.index.nearby(e).center}},c.detect_future_event=function(){if(null!=s&&s.cancel(),null!=o&&clearInterval(o),c.fixedRate)return;if(null==c.ctrl)throw new Error("cursor.ctrl can not be undefined with isFixedRate=false");if(null==c.src)throw new Error("cursor.src can not be undefined with isFixedRate=false");const{value:t,dynamic:e,offset:n}=c.ctrl.query();if(!e)return;const r=c.src.index.nearby(t),i=r.itv[0]??-1/0,u=r.itv[1]??1/0;if(i!=-1/0||u!=1/0)if(c.ctrl.fixedRate){l([t,c.ctrl.rate,0,n],u)}else{if(c.ctrl.ctrl.fixedRate&&c.ctrl.src.itemsOnly){const e=c.ctrl.src.get_items(n);if(1==e.length){const r=e[0];if("motion"==r.type){const[e,s,o,c]=r.data;if(0==o){return void l([t,s,0,n],s>0?u:i)}}else if("transition"==r.type){const{v0:e,v1:s,t0:o,t1:c,easing:a="linear"}=r.data;if("linear"==a){const r=(s-e)/(c-o);return void l([t,r,0,n],r>0?u:i)}}}}var a,h;a=i,h=u,o=setInterval((()=>{!function(t,e){let n=c.ctrl.value;(t>-1/0&&n<t||e<1/0&&n>e)&&c.onchange()}(a,h)}),100)}},c.ctrl=e,c.src=n,c}function Pt(t={}){const{ctrl:e,src:n,record:r=!1}=t,i=new It({ctrl:e,src:n,mutable:!0}),s=i.srcprop_check;return i.srcprop_check=function(t,e){if(e=s(t,e),"ctrl"==t){if(!e.fixedRate)throw new Error(`"ctrl" property must be a fixedrate cursor ${e}`);return e}if("src"==t){if(!e.mutable)throw new Error(`"src" property must be mutable layer ${e}`);return e}},i.set=t=>{const e=function(t,e){let n=[];null!=e&&(n=[{id:D(10),itv:[null,null,!0,!0],type:"static",data:e}]);return n}(0,t);return i.update(e)},i.motion=t=>{const e=function(t,e={}){let{value:n,offset:r}=t.query();"number"==typeof n&&isFinite(n)||(n=0);const{position:i=n,velocity:s=0,acceleration:o=0,timestamp:c=r,range:l=[null,null]}=e;T.check_range(l),H("position",i),H("velocity",s),H("acceleration",o),H("timestamp",c);const u=[],a=(0,T.calculate_time_ranges)([i,s,o,c],l),h=t.ctrl.value,f=a.find((t=>{const e=t[0]??-1/0,n=t[1]??1/0;return e<=h&&h<=n}));if(null!=f){const[t,e]=f;u.push({id:D(10),itv:[t,e,!0,!0],type:"motion",data:[i,s,o,c]}),null!=t&&u.push({id:D(10),itv:[null,t,!0,!1],type:"static",data:l[0]}),null!=e&&u.push({id:D(10),itv:[e,null,!1,!0],type:"static",data:l[1]})}else{const t=i<l[0]?l[0]:l[1];u.push({id:D(10),itv:[null,null,!0,!0],type:"static",data:t})}return u}(i,t);return i.update(e)},i.transition=({target:t,duration:e,easing:n})=>{const r=function(t,e,n,r){const{value:i,offset:s}=t.query(),o=e,c=s+n;if(o==i)return;return H("position",i),H("position",o),H("position",s),H("position",c),[{id:D(10),itv:[null,s,!0,!1],type:"static",data:i},{id:D(10),itv:[s,c,!0,!0],type:"transition",data:{v0:i,v1:o,t0:s,t1:c,easing:r}},{id:D(10),itv:[c,null,!1,!0],type:"static",data:o}]}(i,t,e,n);return i.update(r)},i.interpolate=({tuples:t,duration:e})=>{const n=function(t,e,n){const r=t.ctrl.value;e=e.map((([t,e])=>(H("ts",e),H("val",t),[t,r+e])));const i=xt([null,null,!0,!0],{type:"interpolation",data:e}),s=r,o=s+n,c=i.state(s).value,l=i.state(o).value;return[{id:D(10),itv:[-1/0,s,!0,!1],type:"static",data:c},{id:D(10),itv:[s,o,!0,!1],type:"interpolation",data:e},{id:D(10),itv:[o,1/0,!0,!0],type:"static",data:l}]}(i,t,e);return i.update(n)},i.update=t=>{if(null!=t)return r?i.src.append(t,i.ctrl.value):i.src.update({insert:t,reset:!0})},i}class Nt extends v{constructor(t){super(),this._cursor=t}nearby(t){return{itv:[null,null,!0,!0],center:[this._cursor],left:m.NEG_INF,prev:m.NEG_INF,right:m.POS_INF,next:m.POS_INF}}}const Ct={sum:{valueFunc:function(t){return t.states.map((t=>t.value)).reduce(((t,e)=>t+e),0)}},stack:{stateFunc:function(t){return{...t.states[0]}}},array:{valueFunc:function(t){return t.states.map((t=>t.value))}}};function St(t,e){return m.cmp(t,e)}function Lt(t,e){return m.cmp(e,t)}class qt extends v{constructor(t){super(),this._sources=t,this._caches=new Map(t.map((t=>[t,t.createCache()])))}nearby(t){t=m.from_input(t);const e=[],n=[],r=[],i=[],s=[];for(let o of this._sources){let c=o.index.nearby(t),l=o.index.find_region(c,{direction:-1}),u=o.index.find_region(c,{direction:1});if(null!=l&&e.push(m.from_interval(l.itv)[1]),null!=u&&n.push(m.from_interval(u.itv)[0]),c.center.length>0){r.push(this._caches.get(o));let[t,e]=m.from_interval(c.itv);i.push(e),s.push(t)}}n.sort(St);const o=n[0]||m.POS_INF;e.sort(Lt);return O(e[0]||m.NEG_INF,s,r,i,o)}}function At(t){return{query:function(e){return{value:t,dynamic:!1,offset:e}}}}class Ht extends v{constructor(t,e={}){super(),this._index=t;let{condition:n=t=>t.length>0}=e;this._condition=n}nearby(t){t=m.from_input(t);const e=this._index.nearby(t);let n=this._condition(e.center);const r=t=>this._condition(t)!=n;let i,s,o=this._index.find_region(e,{direction:1,condition:r});null!=o&&(i=m.from_interval(o.itv)[0]);let c=this._index.find_region(e,{direction:-1,condition:r});null!=c&&(s=m.from_interval(c.itv)[1]),s=s||m.NEG_INF,i=i||m.POS_INF;const l=m.flip(s),u=m.flip(i),a=n?1:0;return{itv:g.from_endpoints(l,u),center:[At(a)],left:s,right:i}}}function Mt(t){if(!(t instanceof z))throw new Error(`must be layer ${t}`);return{eval:function(e){for(let n of e)if(n.src==t)return!0;return!1}}}function jt(t,{shift:e=0,scale:n=1}){if(null==t||!isFinite(t))return t;if("number"==typeof t)return t*n+e;if(Array.isArray(t)&&t.length>1){let[r,i]=t;return m.from_input([r*n+e,i])}}function Gt(t,{shift:e=0,scale:n=1}){if(null==t||!isFinite(t))return t;if("number"==typeof t)return(t-e)/n;if(Array.isArray(t)&&t.length>1){let[r,i]=t;return m.from_input([(r-e)/n,i])}}Mt.and=function(...t){return{eval:function(e){return t.every((t=>t.eval(e)))}}},Mt.or=function(...t){return{eval:function(e){return t.some((t=>t.eval(e)))}}},Mt.xor=function(t,e){return{eval:function(n){return t.eval(n)!=e.eval(n)}}},Mt.not=function(t){return{eval:function(e){return!t.eval(e)}}};class Dt extends v{constructor(t,e={}){super(),this._layer=t,this._cache=t.createCache(),this._options=e,this._transform_cache={query:function(t){return{...this._cache.query(Gt(t,this._options)),offset:t}}.bind(this)}}nearby(t){t=m.from_input(t);const e=this._layer.index.nearby(Gt(t,this._options)),n=e.itv.slice();return n[0]=jt(e.itv[0],this._options),n[1]=jt(e.itv[1],this._options),{itv:n,left:jt(e.left,this._options),right:jt(e.right,this._options),center:e.center.map((()=>this._transform_cache))}}}function Rt(t={}){const{ctrl:e,src:n,dst:r}=t;if(!(e instanceof J))throw new Error(`ctrl must be a cursor ${e}`);if(!e.fixedRate&&!e.ctrl.fixedRate)throw new Error(`ctrl or ctrl.ctrl must be fixedRate ${e}`);if(!e.fixedRate&&e.ctrl.fixedRate&&!e.itemsOnly)throw new Error(`given ctrl.ctrl.fixedRate, ctrl must be itemsOnly ${e}`);if(!(n instanceof J))throw new Error(`src must be a cursor ${n}`);if(n.fixedRate)throw new Error(`cursor src can not be fixedRate cursor ${n}`);if(!n.itemsOnly)throw new Error(`cursor src must be itemsOnly ${n}`);if(!n.mutable)throw new Error(`cursor src must be mutable ${n}`);const i=n.src.provider,s=r.provider;if(i===s)throw new Error("src and dst can not have the same stateProvider");let o=!1;function c(){const t=o;if(o=!1,e.fixedRate)o=!0;else{const t=e.ctrl.value,n=e.src.index.nearby(t).center;if(1==n.length&&"motion"==n[0].type){const[t,e,r,i]=n[0].data;(e>0||0==e&&r>0)&&(o=!0)}}!t&&o?(console.log("start recording"),l()):t&&!o&&function(){console.log("stop recording");const t=M.now(),n=e.query(t).value,i=r.index.nearby(n).center,s=i.map((t=>{const e={...t};return e.itv[1]=n,e.itv[3]=!1,e}));i.length>0&&r.update({insert:s,reset:!1})}()}function l(){const t=M.now(),s=n.query(t).offset,o=e.query(t).value;let c=structuredClone(i.get());const l=o-s;if(0!=l){const t=c.map((t=>function(t,e){t={...t},t.itv[0]=null!=t.itv[0]?t.itv[0]+e:null,t.itv[1]=null!=t.itv[1]?t.itv[1]+e:null,"motion"==t.type?t.data.timestamp=t.data.timestamp+e:"transition"==t.type&&(t.data.t0=t.data.t0+e,t.data.t1=t.data.t1+e);return t}(t,l)));r.append(t,o)}else r.append(c,s)}return i.add_callback((function(){o&&l()})),e.add_callback(c),c(),r}function Wt(t,e){const n=t.id,r=t.type;let i="";if(null!=t.itv){const[e,n,r,s]=t.itv;i=`[${null==e?"null":e.toFixed(2)},${null==n?"null":n.toFixed(2)},${r},${s}]`}let s=`<span class="item-id">${n}</span>`,o=`<span class="item-itv">${i}</span>`,c=`<span class="item-type">${r}</span>`,l=`<span class="item-data">${JSON.stringify(t.data)}</span>`;const{delete_allowed:u=!1}=e;return u?`\n        <div>\n            <button id="delete">X</button>\n            ${s}: ${c} ${o} ${l}\n        </div>`:`\n        <div>\n            ${s}: ${c} ${o} ${l}\n        </div>`}class Tt{constructor(t,e,n={}){this._sp=t,this._elem=e,this._handle=this._sp.add_callback(this._onchange.bind(this));let r={toString:Wt};this._options={...r,...n},this._options.delete_allowed&&e.addEventListener("click",(t=>{const e=t.target.closest("#delete");if(e){const n=e.closest(".list-item");n&&(this._sp.update({remove:[n.id]}),t.stopPropagation())}})),this._onchange()}_onchange(){const t=this._sp.get()||[];t.sort(((t,e)=>{let n=m.from_interval(t.itv)[0],r=m.from_interval(e.itv)[0];return m.cmp(n,r)})),this._elem.replaceChildren();const{toString:e}=this._options;for(let n of t){let t=this._elem.querySelector(`#${n.id}`);null==t&&(t=document.createElement("div"),t.setAttribute("id",n.id),t.classList.add("list-item"),this._elem.appendChild(t)),t.innerHTML=e(n,this._options)}}}function zt(t={}){let{src:e,provider:n,items:r=[],value:i,...s}=t;if(null!=e&&e instanceof z)return e;if(null==n)if(null!=i){const t=G([{itv:[null,null,!0,!0],data:i}]);n=new et({items:t})}else r=G(r),n=new Z({items:r});return $t({provider:n,...s})}function Ut(t={}){const{clock:e,vector:n,...r}=t,i=((t={})=>{const{clock:e,vector:n}=t;return null==e&&null==n?K:new X(t)})({clock:e,vector:n});return function(t={}){const{provider:e,shift:n=0,scale:r=1}=t,i=new J;return Object.defineProperty(i,"numeric",{get:()=>!0}),Object.defineProperty(i,"fixedRate",{get:()=>!0}),i.query=function(t=M.now()){return{value:e.now(t)*r+n,dynamic:!0,offset:t}},it(i),st(i),i.srcprop_register("provider"),i.srcprop_check=function(t,n){if("provider"==t){if(!(n instanceof X))throw new Error(`provider must be clockProvider ${e}`);return n}},i.srcprop_onchange=function(t,e){"provider"==t&&"reset"==e&&i.onchange()},i.rate=1*r,i.provider=e,i}({provider:i,...r})}return t.CollectionProvider=Z,t.Cursor=J,t.Layer=z,t.NearbyIndexBase=v,t.ObjectProvider=et,t.boolean=function(t){const e=new z;return e.index=new Ht(t.index),t.add_callback((t=>{e.onchange(t)})),Object.defineProperty(e,"numeric",{get:()=>!0}),e.src=t,e},t.clock=Ut,t.cursor_transform=function(t,e={}){if(!(t instanceof J))throw new Error(`src must be a Cursor ${t}`);const{numeric:n,valueFunc:r,stateFunc:i}=e,s=new J;return s.query=function(){return function(t,e={}){const{valueFunc:n,stateFunc:r}=e;return null!=n?(t.value=n(t.value),t):null!=r?r(t):t}(t.query(),{stateFunc:i,valueFunc:r})},Object.defineProperty(s,"numeric",{get:()=>null==n?t.numeric:n}),Object.defineProperty(s,"fixedRate",{get:()=>t.fixedRate}),t.fixedRate&&Object.defineProperty(s,"rate",{get:()=>t.rate}),t.add_callback((()=>{s.onchange()})),s},t.layer=zt,t.layer_from_cursor=function(t){if(!(t instanceof J))throw new Error(`src must be a Cursor ${t}`);const e=new z;return e.index=new Nt(t),Object.defineProperty(e,"numeric",{get:()=>t.numeric}),t.add_callback((t=>{e.onchange(t)})),e.src=t,e},t.layer_transform=function(t,e={}){if(!(t instanceof z))throw new Error(`src must be a Layer ${t}`);const n={};var r,i;n.valueFunc=(r=e.valueFunc,function({sources:t,states:e,offset:n}){return r(e[0].value)}),n.stateFunc=(i=e.stateFunc,function({sources:t,states:e,offset:n}){return i(e[0])});const s=new z(n);return s.index=new E(t),s.src=t,s.src.add_callback((t=>{s.onchange(t)})),Object.defineProperty(s,"numeric",{get:()=>t.numeric}),s},t.local_clock=M,t.logical_expr=Mt,t.logical_merge=function(t,e={}){const{expr:n}=e;let r;n&&(r=t=>n.eval(t));const i=new z,s=new qt(t);return i.index=new Ht(s,{condition:r}),t.map((t=>t.add_callback(i.onchange))),i.sources=t,Object.defineProperty(i,"numeric",{get:()=>!0}),i},t.merge=function(t,e={}){let{type:n="",...r}=e;n in Ct&&(r=Ct[n]);const i=new z(r);it(i),st(i),i.srcprop_register("sources"),i.srcprop_check=function(t,e){if("sources"==t){if(!Array.isArray(e))throw new Error(`sources must be array ${e}`);if(!e.map((t=>t instanceof z)).every((t=>t)))throw new Error(`sources must all be layers ${e}`)}return e},i.srcprop_onchange=function(t,e){"sources"==t&&("reset"==e&&(i.index=new qt(i.sources)),i.onchange())};const s=t.map((t=>t.numeric)).every((t=>t));return Object.defineProperty(i,"numeric",{get:()=>s}),i.sources=t,i},t.object=function(t={}){let{ctrl:e,src:n,...r}=t;return null==e&&(e=Ut()),null==n&&(n=zt(r)),Pt({ctrl:e,src:n})},t.playback=function(t={}){let{ctrl:e,src:n,...r}=t;return null==e&&(e=Ut()),null==n&&(n=zt(r)),It({ctrl:e,src:n})},t.record=function(t={}){const e=zt({mutable:!0});let{ctrl:n,src:r}=t;return null==n&&(n=Ut()),Rt({ctrl:n,src:r,dst:e})},t.render_cursor=function(t,e,n={}){const{delay:r=200,render:i,novalue:s}=n,o=document.querySelector(e);return t.bind((function(t){null==t.value&&null!=s&&(t.value=s),null!=i?i(t,o):o.textContent=null!=t.value?`${t.value}`:""}),r)},t.render_provider=function(t,e,n={}){const r=document.querySelector(e);return new Tt(t,r,n)},t.timeline_transform=function(t,e={}){const n=new z;return it(n),st(n),n.srcprop_register("src"),n.srcprop_check=function(t,e){if("src"==t){if(!(e instanceof z))throw new Error(`"src" must be Layer ${e}`);return e}},n.srcprop_onchange=function(t,r){"src"==t&&("reset"==r&&(this.index=new Dt(this.src,e)),n.onchange())},Object.defineProperty(n,"numeric",{get:()=>t.numeric}),n.src=t,n},t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
