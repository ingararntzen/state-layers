var LAYERS=function(t){"use strict";function e(t,e){let[n,i]=t,[r,s]=e,o=(a=n)===(c=r)?0:a===1/0?1:c===1/0||a===-1/0?-1:c===-1/0?1:a-c;var a,c;return 0!=o?o:i-s}function n(t,n){return e(t,n)<=0}function i(t,n){return e(t,n)>=0}function r(t){let[e,n,i,r]=t;return[i?[e,0]:[e,1],r?[n,0]:[n,-1]]}function s(t,e){let[i,s]=r(t);return n(i,e)&&n(e,s)}function o(t){return"number"==typeof t}const a={le:n,lt:function(t,n){return e(t,n)<0},ge:i,gt:function(t,n){return e(t,n)>0},cmp:e,eq:function(t,n){return 0==e(t,n)},min:function(t,e){return n(t,e)?t:e},max:function(t,e){return i(t,e)?t:e},flip:function(t,e){let[n,i]=t;if(!isFinite(n))return t;if("low"==e){if(i>0)throw new Error("endpoint is already low");t=[n,i+1]}else{if("high"!=e)throw new Error("illegal type",e);if(i<0)throw new Error("endpoint is already high");t=[n,i-1]}return t},from_interval:r,from_input:function(t){if("number"==typeof t)return[t,0];if(!Array.isArray(t)||2!=t.length)throw new Error("Endpoint must be a length-2 array");let[e,n]=t;if("number"!=typeof e)throw new Error("Endpoint value must be number");return[e,Math.sign(n)]}},c={covers_endpoint:s,covers_point:function(t,e){return s(t,[e,0])},is_singular:function(t){return t[0]==t[1]},from_endpoints:function(t,e){let[n,i]=t,[r,s]=e;if(-1==i)throw new Error("illegal low point",t);if(1==s)throw new Error("illegeal high point",e);return[n,r,0==i,0==s]},from_input:function(t){let e=t;if(null==e)throw new Error("input is undefined");if(!Array.isArray(e)){if(!o(e))throw new Error(`input: ${t}: must be Array or Number`);e=[e,e,!0,!0]}1==e.length?e=[e[0],e[0],!0,!0]:2==e.length?e=e.concat([!0,!1]):3==e.length?e=e.push(!1):e.length>4&&(e=e.slice(0,4));let[n,i,r,s]=e;if(null!=n&&null!=n||(n=-1/0),null!=i&&null!=i||(i=1/0),!o(n))throw new Error("low not a number",n);if(!o(i))throw new Error("high not a number",i);if(n>i)throw new Error("low > high",n,i);if(n==i&&(r=!0,s=!0),n==-1/0&&(r=!0),i==1/0&&(s=!0),"boolean"!=typeof r)throw new Error("lowInclude not boolean");if("boolean"!=typeof s)throw new Error("highInclude not boolean");return[n,i,r,s]}};function l(t,e){let n=Math.floor(t/e),i=function(t,e){return(t%e+e)%e}(t,e);return[n,i]}function h(t,e,n,i={}){let{valueFunc:r,stateFunc:s}=i;if(null!=r){return{value:r({sources:t,states:e,offset:n}),dynamic:e.map((t=>t.dymamic)).some((t=>t)),offset:n}}return null!=s?{...s({sources:t,states:e,offset:n}),offset:n}:0==e.length?{value:void 0,dynamic:!1,offset:n}:{...e[0],offset:n}}const u="__callback";function _(t){t[`${u}_handlers`]=[]}function f(t){let e={handler:t};return this[`${u}_handlers`].push(e),e}function d(t){let e=this[`${u}_handlers`].indexOf(t);e>-1&&this[`${u}_handlers`].splice(e,1)}function p(t){this[`${u}_handlers`].forEach((function(e){e.handler(t)}))}function g(t){const e={add_callback:f,remove_callback:d,notify_callbacks:p};Object.assign(t,e)}function m(t){const e=["add_callback","remove_callback"];for(const n of e){if(!(n in t))return!1;if("function"!=typeof t[n])return!1}return!0}function v(t){return t.itv=c.from_input(t.itv),t.id=t.id||function(t){for(var e="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",i=0;i<t;i++)e+=n.charAt(Math.floor(52*Math.random()));return e}(10),t}function y(t){return!!m(t)&&("get_items"in t&&"function"==typeof t.get_items)}class b{constructor(t={}){_(this),this._map=new Map,this._initialise(t)}_initialise(t={}){let{insert:e,value:n}=t;null!=n&&(e=[{itv:[-1/0,1/0,!0,!0],type:"static",data:n}]),null!=e&&this._update({insert:e,reset:!0})}update(t){return Promise.resolve().then((()=>{let e;return null!=t&&(e=this._update(t),this.notify_callbacks(e)),e}))}_update(t){const e=new Map;let{insert:n=[],remove:i=[],reset:r=!1}=t;if(r){for(const[t,n]of this._map.entries())e.set(t,{id:t,new:void 0,old:n});this._map=new Map}else for(const t of i){let n=this._map.get(t);null!=n&&(e.set(n.id,{id:n.id,new:void 0,old:n}),this._map.delete(t))}for(let t of n){t=v(t);const n=e.get(t.id),i=null!=n?n.old:this._map.get(t.id);e.set(t.id,{id:t.id,new:t,old:i}),this._map.set(t.id,t)}return[...e.values()]}get_items(){return[...this._map.values()]}}g(b.prototype);class w{nearby(t){throw new Error("Not implemented")}first(){let{center:t,right:e}=this.nearby([-1/0,0]);return t.length>0?[-1/0,0]:e}last(){let{left:t,center:e}=this.nearby([1/0,0]);return e.length>0?[1/0,0]:t}right_region(t){const e=function(t){const e=a.from_interval(t.itv)[1];return a.flip(e,"low")}(t);if(e[0]!=1/0)return this.nearby(e)}left_region(t){const e=function(t){const e=a.from_interval(t.itv)[0];return a.flip(e,"high")}(t);if(e[0]!=-1/0)return this.nearby(e)}find_region(t,e={}){let n,{direction:i=1,condition:r=t=>t.length>0}=e;for(;;){if(n=1==i?this.right_region(t):this.left_region(t),null==n)return;if(r(n.center))return n;t=n}}regions(t){return new x(this,t)}}class x{constructor(t,e={}){let{start:n=-1/0,stop:i=1/0,includeEmpty:r=!0}=e;if(n>i)throw new Error("stop must be larger than start",n,i);this._index=t,this._start=[n,0],this._stop=[i,0],this._condition=r?()=>!0:t=>t.length>0,this._current}next(){if(null==this._current&&(this._current=this._index.nearby(this._start),this._condition(this._current.center)))return{value:this._current,done:!1};let t={condition:this._condition,direction:1};return this._current=this._index.find_region(this._current,t),null==this._current?{value:void 0,done:!0}:{value:this._current,done:!1}}[Symbol.iterator](){return this}}function k(t,e){return a.cmp(t,e)}function E(t,e){return a.cmp(e,t)}function q(t,e,n,i,r){const s={center:n};if(0==n.length)s.right=r,s.left=t;else{i.sort(k);let n=i[0],o=i.slice(-1)[0],c=!a.eq(n,o);e.sort(E);let l=e[0],h=e.slice(-1)[0],u=!a.eq(l,h);a.le(r,n)?s.right=r:s.right=a.flip(n,"low"),s.next=c?s.right:r,a.ge(t,l)?s.left=t:s.left=a.flip(l,"high"),s.prev=u?s.left:t}let o=a.flip(s.left,"low"),l=a.flip(s.right,"high");return s.itv=c.from_endpoints(o,l),s}class ${constructor(t,e,n){n=n||{},this.publisher=t,this.name=e,this.init=void 0!==n.init&&n.init,this.subscriptions=[]}subscribe(t,e){if(!t||"function"!=typeof t)throw new Error("Callback not a function",t);const n=new O(this,t,e);if(this.subscriptions.push(n),this.init&&n.init){n.init_pending=!0;let t=this;Promise.resolve().then((function(){const e=t.publisher.eventifyInitEventArgs(t.name)||[];n.init_pending=!1;for(let i of e)t.trigger(i,[n],!0)}))}return n}trigger(t,e,n){let i,r;for(const s of e)if(!s.terminated){i={src:this.publisher,name:this.name,sub:s,init:n},r=s.ctx||this.publisher;try{s.callback.call(r,t,i)}catch(t){console.log(`Error in ${this.name}: ${s.callback} ${t}`)}}}unsubscribe(t){let e=this.subscriptions.indexOf(t);e>-1&&(this.subscriptions.splice(e,1),t.terminate())}}class O{constructor(t,e,n){n=n||{},this.event=t,this.name=t.name,this.callback=e,this.init=void 0===n.init?this.event.init:n.init,this.init_pending=!1,this.terminated=!1,this.ctx=n.ctx}terminate(){this.terminated=!0,this.callback=void 0,this.event.unsubscribe(this)}}function M(t){return t.__eventify_eventMap=new Map,t.__eventify_buffer=[],t}function C(t){function e(t,e){const n=t.__eventify_eventMap.get(e);if(null==n)throw new Error("Event undefined",e);return n}t.eventifyDefine=function(t,e){if(this.__eventify_eventMap.has(t))throw new Error("Event already defined",t);this.__eventify_eventMap.set(t,new $(this,t,e))},t.eventifyTrigger=function(t,e){return this.eventifyTriggerAll([{name:t,eArg:e}])},t.eventifyTriggerAlike=function(t,e){return this.eventifyTriggerAll(e.map((e=>({name:t,eArg:e}))))},t.eventifyTriggerAll=function(t){if(0==t.length)return;let n=t.map((t=>{let{name:n,eArg:i}=t,r=e(this,n),s=r.subscriptions.filter((t=>0==t.init_pending));return[r,i,s]}),this);const i=n.length,r=this.__eventify_buffer,s=this.__eventify_buffer.length;this.__eventify_buffer.length=s+i;for(let t=0;t<i;t++)r[s+t]=n[t];if(0==s){let t=this;Promise.resolve().then((function(){for(let[e,n,i]of t.__eventify_buffer)e.trigger(n,i,!1);t.__eventify_buffer=[]}))}},t.eventifySubscriptions=function(t){return e(this,t).subscriptions},t.on=function(t,n,i){return e(this,t).subscribe(n,i)},t.off=function(t){return e(this,t.name).unsubscribe(t)}}C(class{constructor(t){M(this),this._value=t,this.eventifyDefine("change",{init:!0})}eventifyInitEventArgs(t){if("change"==t)return[this._value]}get value(){return this._value}set value(t){t!=this._value&&(this._value=t,this.eventifyTrigger("change",t))}}.prototype);const A="srcprop",F=`__${A}`;function I(t){t[`${F}`]=new Map}function T(t){const e={};e[`${A}_register`]=function(t,e={}){let{mutable:n=!0}=e;const i=this[`${F}`];i.set(t,{init:!1,mutable:n,entity:void 0,handles:[]}),Object.defineProperty(this,t,{get:function(){return i.get(t).entity},set:function(e){this[`${A}_check`]&&(e=this[`${A}_check`](t,e)),e!=i.get(t).entity&&this[`${F}_attach`](t,e)}})},e[`${F}_attach`]=function(t,e){const n=this[`${F}`].get(t);if(n.init&&!n.mutable)throw new Error(`${t} can not be reassigned`);const i=Array.isArray(e)?e:[e];if(n.handles.length>0)for(const[t,e]of Object.entries(i))m(e)&&e.remove_callback(n.handles[t]);if(n.handles=[],n.entity=e,n.init=!0,this[`${A}_onchange`]){const e=function(e){this[`${A}_onchange`](t,e)}.bind(this);for(const t of i)m(t)&&n.handles.push(t.add_callback(e));this[`${A}_onchange`](t,"reset")}},Object.assign(t,e)}class j{constructor(t){this._itv=t}get itv(){return this._itv}state(t){throw new Error("not implemented")}query(t){return c.covers_point(this._itv,t)?{...this.state(t),offset:t}:{value:void 0,dynamic:!1,offset:t}}}class S extends j{constructor(t,e){super(t),this._value=e}state(){return{value:this._value,dynamic:!1}}}class P extends j{constructor(t,e){super(t);const{position:n=0,velocity:i=0,acceleration:r=0,timestamp:s=0}=e;this._pos_func=function(t){let e=t-s;return n+i*e+.5*r*e*e},this._vel_func=function(t){return i+r*(t-s)},this._acc_func=function(t){return r}}state(t){let e=this._pos_func(t),n=this._vel_func(t),i=this._acc_func(t);return{position:e,velocity:n,acceleration:i,timestamp:t,value:e,dynamic:0!=n||0!=i}}}function D(t){return Math.pow(t,2)}class z extends j{constructor(t,e){super(t);let{v0:n,v1:i,easing:r}=e,[s,o]=this._itv.slice(0,2);this._dynamic=i-n!=0,this._trans=function(t){return t-=s,t/=parseFloat(o-s),"ease-in"==r?t=D(t):"ease-out"==r?t=function(t){return 1-D(1-t)}(t):"ease-in-out"==r&&(t=function(t){return t<.5?D(2*t)/2:(2-D(2*(1-t)))/2}(t)),t=Math.max(t,0),t=Math.min(t,1),n+(i-n)*t}}state(t){return{value:this._trans(t),dynamic:this._dynamic}}}class L extends j{constructor(t,e){super(t),this._trans=function(t){if(t.length<1)return function(){};if(1==t.length)return function(){return t[0][0]};const e=[...t].sort(((t,e)=>t[1]-e[1]));return function(t){if(t<=e[0][1]){const[n,i]=e[0],[r,s]=e[1];return n+(t-i)*(r-n)/(s-i)}if(t>=e[e.length-1][1]){const[n,i]=e[e.length-2],[r,s]=e[e.length-1];return n+(t-i)*(r-n)/(s-i)}for(let n=0;n<e.length-1;n++)if(t>=e[n][1]&&t<=e[n+1][1]){const[i,r]=e[n],[s,o]=e[n+1];return i+(t-r)*(s-i)/(o-r)}}}(e)}state(t){return{value:this._trans(t),dynamic:!0}}}function N(t,e){return a.lt(a.from_input(t),a.from_input(e))}function B(t,e){return a.cmp(a.from_input(t),a.from_input(e))}class R{constructor(){this._array=[]}get size(){return this._array.length}get array(){return this._array}indexOf(t){let e=0,n=this._array.length-1;for(;e<=n;){const s=Math.floor((e+n)/2);let o=this._array[s];if(i=o,r=t,a.eq(a.from_input(i),a.from_input(r)))return[!0,s];N(o,t)?e=s+1:n=s-1}var i,r;return[!1,e]}geIndexOf(t){let[e,n]=this.indexOf(t);return n<this._array.length?n:-1}leIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n:n-1,n>=0?n:-1}gtIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n+1:n,n<this._array.length?n:-1}ltIndexOf(t){let[e,n]=this.indexOf(t);return n-=1,n>=0?n:-1}update(t=[],e=[]){let n=[];for(let e of t){let[t,i]=this.indexOf(e);t&&n.push(i)}for(let t of n)this._array[t]=void 0;let i=n.length>0,r=e.length>0;r&&function(t,e){const n=t.length,i=e.length;t.length+=i;for(let r=0;r<i;r++)t[n+r]=e[r]}(this._array,e),(i||r)&&this._array.sort(B),i&&(this._array.length-=n.length),r&&function(t){let e=0;for(;!(e+1>=t.length);)t[e]==t[e+1]?t.splice(e+1,1):e+=1}(this._array)}get_by_index(t){if(t>-1&&t<this._array.length)return this._array[t]}lookup(t){null==t&&(t=[-1/0,1/0,!0,!0]);let[e,n]=a.from_interval(t),i=this.geIndexOf(e),r=this.leIndexOf(n);return-1==i||-1==r?[]:this._array.slice(i,r+1)}lt(t){return this.get_by_index(this.ltIndexOf(t))}le(t){return this.get_by_index(this.leIndexOf(t))}get(t){let[e,n]=this.indexOf(t);if(e)return this._array[n]}gt(t){return this.get_by_index(this.gtIndexOf(t))}ge(t){return this.get_by_index(this.geIndexOf(t))}}class Y{constructor(){this._map=new Map([[-1,new Set],[0,new Set],[1,new Set]])}add([t,e]){return this._map.get(e).add(t)}has([t,e]){return this._map.get(e).has(t)}get([t,e]){return this._map.get(e).get(t)}list(){const t=[-1,0,1].map((t=>[...this._map.get(t).values()].map((e=>[e,t]))));return[].concat(...t)}}const G="low",H="active",J="high";class K{constructor(){this._map=new Map([[-1,new Map],[0,new Map],[1,new Map]])}get_items_by_role([t,e],n){const i=this._map.get(e).get(t);return null!=i?i[n]:[]}register([t,e],n,i){const r=this._map.get(e);r.has(t)||r.set(t,{low:[],active:[],high:[]});const s=r.get(t),o=s[G].length+s[J].length==0;-1==s[i].findIndex((t=>t.id==n.id))&&s[i].push(n);const a=s[G].length+s[J].length==0;return o&&!a}unregister([t,e],n){const i=this._map.get(e),r=i.get(t);if(null!=r){const e=r[G].length+r[J].length==0;for(const t of[G,H,J]){let e=r[t].findIndex((t=>t.id==n.id));e>-1&&r[t].splice(e,1)}const s=r[G].length+r[J].length==0;if(!e&&s)return i.delete(t),!0}return!1}}class Q extends w{constructor(t){if(super(),!y(t))throw new Error(`must be stateprovider ${t}`);this._sp=t,this._initialise(),this.refresh()}get src(){return this._sp}_initialise(){this._itemsmap=new K,this._endpoints=new R,this._index=[]}refresh(t){const e=new Y,n=new Y;let i,r=[],s=[];if(null==t)r=this.src.get_items(),this._initialise();else for(const e of t)null!=e.new&&r.push(e.new),null!=e.old&&s.push(e.old);for(const t of s){this._endpoints.lookup(t.itv);for(const n of this._endpoints.lookup(t.itv)){this._itemsmap.unregister(n,t)&&e.add(n)}}for(const t of r){const[e,r]=a.from_interval(t.itv);i=this._itemsmap.register(e,t,G),i&&n.add(e),i=this._itemsmap.register(r,t,J),i&&n.add(r)}this._endpoints.update(e.list(),n.list());const o=new Set;for(const t of this._endpoints.array){for(let e of this._itemsmap.get_items_by_role(t,G))o.add(e);for(let e of o)this._itemsmap.register(t,e,H);for(let e of this._itemsmap.get_items_by_role(t,J))o.delete(e)}}_covers(t){const e=this._endpoints.le(t)||[-1/0,0],n=this._endpoints.ge(t)||[1/0,0];if(a.eq(e,n))return this._itemsmap.get_items_by_role(e,H);{const t=this._itemsmap.get_items_by_role(e,H),i=this._itemsmap.get_items_by_role(n,H),r=new Set(t.map((t=>t.id)));return i.filter((t=>r.has(t.id)))}}nearby(t){t=a.from_input(t);let e=this._covers(t);const n=[],i=[];for(const t of e){const[e,r]=a.from_interval(t.itv);n.push(r),i.push(e)}let r,s=t;for(;!(s=this._endpoints.lt(s)||[-1/0,0],s[0]==-1/0||(r=this._itemsmap.get_items_by_role(s,J),r.length>0)););let o=t;for(;!(o=this._endpoints.gt(o)||[1/0,0],o[0]==1/0||(r=this._itemsmap.get_items_by_role(o,G),r.length>0)););return q(s,i,e,n,o)}}class U{constructor(t={}){const{CacheClass:e=V}=t,{valueFunc:n,stateFunc:i}=t;_(this),M(this),this.eventifyDefine("change",{init:!0}),this._index,this._CacheClass=e,this._cache_object,this._cache_objects=[],this._queryOptions={valueFunc:n,stateFunc:i}}get index(){return this._index}set index(t){this._index=t}get queryOptions(){return this._queryOptions}get cache(){return null==this._cache_object&&(this._cache_object=new this._CacheClass(this)),this._cache_object}getCache(){const t=new this._CacheClass(this);return this._cache_objects.push(t),t}clearCaches(){for(const t of this._cache_objects)t.clear()}query(t){return this.cache.query(t)}regions(t){return this.index.regions(t)}sample(t={}){let{start:e=-1/0,stop:n=1/0,step:i=1}=t;if(e>n)throw new Error("stop must be larger than start",e,n);e=[e,0],n=[n,0],e=a.max(this.index.first(),e),n=a.min(this.index.last(),n);const r=this.getCache();return function(t,e,n=1,i={}){const r=[],{include_end:s=!1}=i;if(0===n)throw new Error("Step cannot be zero.");if(t<e)for(let i=t;i<e;i+=n)r.push(i);else if(t>e)for(let i=t;i>e;i-=n)r.push(i);return s&&r.push(e),r}(e[0],n[0],i,{include_end:!0}).map((t=>[r.query(t).value,t]))}}g(U.prototype),C(U.prototype);class V{constructor(t){this._layer=t,this._nearby,this._state}get src(){return this._layer}query(t){const e=null==this._nearby||!c.covers_point(this._nearby.itv,t);if(!e&&null!=this._state&&!this._state.dynamic)return{...this._state,offset:t};e&&(this._nearby=this._layer.index.nearby(t));const n=this._nearby.center.map((e=>e.query(t))),i=h(this._nearby.center,n,t,this._layer.queryOptions);return this._state=i.dynamic?void 0:i,i}clear(){this._nearby=void 0,this._state=void 0}}class W extends U{constructor(t={}){const{src:e,valueFunc:n,stateFunc:i}=t;super({CacheClass:X,valueFunc:n,stateFunc:i}),I(this),this.srcprop_register("src"),this.src=e}srcprop_check(t,e){if("src"==t){if(!y(e))throw new Error(`"src" must be state provider ${e}`);return e}}srcprop_onchange(t,e){"src"==t&&(null!=this.index&&"reset"!=e||(this.index=new Q(this.src)),"reset"!=e&&this.index.refresh(e),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change"))}}T(W.prototype);class X{constructor(t){this._layer=t,this._nearby=void 0,this._segment=void 0}get src(){return this._layer}query(t){if(null==this._nearby||!c.covers_point(this._nearby.itv,t)){this._nearby=this._layer.index.nearby(t);let{itv:e,center:n}=this._nearby;this._segments=n.map((t=>function(t,e){let{type:n="static",data:i}=e;if("static"==n)return new S(t,i);if("transition"==n)return new z(t,i);if("interpolation"==n)return new L(t,i);if("motion"==n)return new P(t,i);console.log("unrecognized segment type",n)}(e,t)))}const e=this._segments.map((e=>e.query(t)));return h(this._segments,e,t,this._layer.queryOptions)}clear(){this._nearby=void 0,this._segment=void 0}}const Z={sum:{valueFunc:function(t){return t.states.map((t=>t.value)).reduce(((t,e)=>t+e),0)}},stack:{stateFunc:function(t){return{...t.states[0]}}},array:{valueFunc:function(t){return t.states.map((t=>t.value))}}};class tt extends U{constructor(t,e){super(e),I(this),this.srcprop_register("sources",{mutable:!1}),this.sources=t}srcprop_check(t,e){if("sources"==t){if(!Array.isArray(e))throw new Error(`sources must be array ${e}`);if(!e.map((t=>t instanceof U)).every((t=>t)))throw new Error(`sources must all be layers ${e}`)}return e}srcprop_onchange(t,e){"sources"==t&&(null!=this.index&&"reset"!=e||(this.index=new it(this.sources)),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change"))}}function et(t,e){return a.cmp(t,e)}function nt(t,e){return a.cmp(e,t)}T(tt.prototype);class it extends w{constructor(t){super(),this._sources=t,this._caches=new Map(t.map((t=>[t,t.getCache()])))}nearby(t){t=a.from_input(t);const e=[],n=[],i=[],r=[],s=[];for(let o of this._sources){let c=o.index.nearby(t),l=o.index.find_region(c,{direction:-1}),h=o.index.find_region(c,{direction:1});if(null!=l&&e.push(a.from_interval(l.itv)[1]),null!=h&&n.push(a.from_interval(h.itv)[0]),c.center.length>0){i.push(this._caches.get(o));let[t,e]=a.from_interval(c.itv);r.push(e),s.push(t)}}n.sort(et);const o=n[0]||[1/0,0];e.sort(nt);return q(e[0]||[-1/0,0],s,i,r,o)}}function rt(t,e){if(null==t||!isFinite(t))return t;if("number"==typeof t)return t+e;if(Array.isArray(t)&&t.length>1){let[n,i]=t;return[n+e,i]}}class st extends w{constructor(t,e){super(),this._layer=t,this._skew=e,this._cache=t.getCache(),this._shifted_cache={query:function(t){return{...this._cache.query(rt(t,-this._skew)),offset:t}}.bind(this)}}nearby(t){t=a.from_input(t);const e=this._layer.index.nearby(rt(t,-this._skew)),n=e.itv.slice();return n[0]=rt(e.itv[0],this._skew),n[1]=rt(e.itv[1],this._skew),{itv:n,left:rt(e.left,this._skew),right:rt(e.right,this._skew),center:e.center.map((()=>this._shifted_cache))}}}class ot extends U{constructor(t,e,n={}){super(n),this._skew=e,I(this),this.srcprop_register("src"),this.src=t}srcprop_check(t,e){if("src"==t){if(!(e instanceof U))throw new Error(`"src" must be Layer ${e}`);return e}}srcprop_onchange(t,e){"src"==t&&(null!=this.index&&"reset"!=e||(this.index=new st(this.src,this._skew)),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change"))}}T(ot.prototype);const at=function(){return performance.now()/1e3},ct=function(){return new Date/1e3},lt=function(){const t=at(),e=ct();return{now:function(){const n=at();return e+(n-t)}}}();function ht(t){return"now"in t&&typeof("function"==t.now)}const ut={assign:function(t){if(null==t)return[];return[{itv:[-1/0,1/0,!0,!0],type:"static",data:t}]},move:function(t){return[{itv:[-1/0,1/0,!0,!0],type:"motion",data:t}]},transition:function(t,e,n,i,r){return[{itv:[-1/0,n,!0,!1],type:"static",data:t},{itv:[n,i,!0,!1],type:"transition",data:{v0:t,v1:e,t0:n,t1:i,easing:r}},{itv:[i,1/0,!0,!0],type:"static",data:e}]},interpolate:function(t){let[e,n]=t[0],[i,r]=t[t.length-1];return[{itv:[-1/0,n,!0,!1],type:"static",data:e},{itv:[n,r,!0,!1],type:"interpolation",data:t},{itv:[r,1/0,!0,!0],type:"static",data:i}]}};function _t(t){if(!y(t))throw new Error(`target.src must be stateprovider ${t}`);let e=Object.entries(ut).map((([e,n])=>[e,function(...e){let i=n.call(this,...e);return t.update({insert:i,reset:!0})}]));return Object.fromEntries(e)}class ft{constructor(t={}){if(this._options=Object.assign({rate:50},t),this._options.rate<50)throw new Error(`illegal rate ${rate}, minimum rate is 50`);this._set=new Set,this._variable_map=new Map,this.__onvariablechange=this._onvariablechange.bind(this)}bind(t,e,n,i={}){let r={callback:e,variable:t,delay:n};if(this._set.add(r),this._variable_map.has(t))this._variable_map.get(t).handles.push(r);else{let e={sub:t.on("change",this.__onvariablechange),polling:!1,handles:[r]};this._variable_map.set(t,e)}return r}release(t){if(!this._set.delete(t))return;t.tid=void 0;let e=t.variable,{sub:n,handles:i}=this._variable_map.get(e),r=i.indexOf(t);r>-1&&i.splice(r,1),0==i.length&&(this._variable_map.delete(e),e.off(n))}_onvariablechange(t,e){let n=e.src,{handles:i}=this._variable_map.get(n),r=t;this._reevaluate_polling(n,r);for(let t of i)t.callback(r)}_reevaluate_polling(t,e){let n=this._variable_map.get(t),{polling:i}=n,r=(e=e||t.query()).dynamic;!i&&r?(n.polling=!0,this._set_timeouts(t)):i&&!r&&(n.polling=!1,this._clear_timeouts(t))}_set_timeouts(t){let{handles:e}=this._variable_map.get(t);for(let t of e)this._set_timeout(t)}_set_timeout(t){let e=this._calculate_delta(t.delay),n=function(){this._handle_timeout(t)}.bind(this);t.tid=setTimeout(n,e)}_calculate_delta(t){let e=this._options.rate,n=Math.round(performance.now()),[i,r]=l(n,e),[s,o]=l(n+t,e);return Math.max(s,i+1)*e-performance.now()}_clear_timeouts(t){let{handles:e}=this._variable_map.get(t);for(let t of e)null!=t.tid&&(clearTimeout(t.tid),t.tid=void 0)}_handle_timeout(t){if(null==t.tid)return;t.tid=void 0;let{variable:e}=t,n=e.query();if(n.dynamic)this._set_timeout(t);else{this._variable_map.get(e).polling=!1}t.callback(n)}}const dt=new ft,pt=new class extends ft{constructor(t={}){super(t),this._handle}_set_timeouts(t){}_set_timeout(t){}_calculate_delta(t){}_clear_timeouts(t){}_handle_timeout(t){}_onvariablechange(t,e){super._onvariablechange(t,e),this._callback()}_callback(){let t=[...this._variable_map.entries()].filter((([t,e])=>e.polling)).map((([t,e])=>t));if(t.length>0){for(let e of t){let{handles:t}=this._variable_map.get(e),n=e.query();for(let e of t)e.callback(n)}this._handle=requestAnimationFrame(this._callback.bind(this))}}};class gt extends w{constructor(t){super(),this._cache=t.getCache()}nearby(t){return{itv:[-1/0,1/0,!0,!0],center:[this._cache],left:[-1/0,0],prev:[-1/0,0],right:[1/0,0],next:[1/0,0]}}}class mt{constructor(t){this._cursor=t,this._cache=this._cursor.src.getCache()}query(){const t=this._cursor._get_ctrl_state().value;return this._cache.query(t)}clear(){this._cache.clear()}}class vt extends U{constructor(t={}){super({CacheClass:mt}),I(this),this.srcprop_register("src"),this.srcprop_register("ctrl"),this._tid,this._pid;let{src:e,ctrl:n}=t;this.ctrl=n||lt,this.src=e}srcprop_check(t,e){if("ctrl"==t){if(!(ht(e)||e instanceof vt))throw new Error(`"ctrl" must be clockProvider or Cursor ${e}`)}else if("src"==t&&!(e instanceof U))throw new Error(`"src" must be Layer ${e}`);return e}srcprop_onchange(t,e){this.__handle_change(t,e)}__handle_change(t,e){clearTimeout(this._tid),clearInterval(this._pid),this.src&&this.ctrl&&(null!=this.index&&"reset"!=e||(this.index=new gt(this)),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change",this.query()),this.__detect_future_change())}__detect_future_change(){const t=this._get_ctrl_state(),{value:e,offset:n}=t;if(!t.dynamic)return;const i=this.src.index.nearby(e),[r,s]=i.itv.slice(0,2);if(ht(this.ctrl))return isFinite(s)?void this.__set_timeout(s,e,1,n):void 0;if(ht(this.ctrl.ctrl)){const t=this.ctrl.index.nearby(n);if(!isFinite(r)&&!isFinite(s))return;if(1==t.center.length){const i=t.center[0];if("motion"==i.type){const{velocity:t,acceleration:o=0}=i.data;if(0==o){let i=t>0?s:r;return isFinite(i)?void this.__set_timeout(i,e,t,n):void 0}}else if("transition"==i.type){const{v0:t,v1:o,t0:a,t1:c,easing:l="linear"}=i.data;if("linear"==l){let i=(o-t)/(c-a);const l=i>0?Math.min(s,o):Math.max(r,o);return void this.__set_timeout(l,e,i,n)}}}}this.__set_polling(i.itv)}__set_timeout(t,e,n,i){const r=(t-e)/n,s=i+r;this._tid=setTimeout((()=>{this.__handle_timeout(s)}),1e3*r+1)}__handle_timeout(t){const e=this._get_ctrl_state().offset,n=t-e;n<=0?this.__handle_change("timeout"):this._tid=setTimeout((()=>{this.__handle_timeout(t)}),1e3*n)}__set_polling(t){this._pid=setInterval((()=>{this.__handle_poll(t)}),100)}__handle_poll(t){let e=this.query().value;c.covers_point(t,e)||this.__handle_change("timeout")}_get_ctrl_state(){if(ht(this.ctrl)){let t=this.ctrl.now();return{value:t,dynamic:!0,offset:t}}{let t=this.ctrl.query();if("number"!=typeof t.value)throw new Error(`warning: ctrl state must be number ${t.value}`);return t}}get value(){return this.query().value}eventifyInitEventArgs(t){if("change"==t)return[this.query()]}bind(t,e,n={}){return function(t,e,n,i={}){let r;return Boolean(parseFloat(n))?(r=dt.bind(t,e,n,i),["timeout",r]):(r=pt.bind(t,e,0,i),["framerate",r])}(this,t,e,n)}release(t){return function(t){let[e,n]=t;return"timeout"==e?dt.release(n):"framerate"==e?pt.release(n):void 0}(t)}assign(t){return _t(this.src.src).assign(t)}move({position:t,velocity:e}){let{value:n,offset:i}=this.query();if("number"!=typeof n)throw new Error(`warning: cursor state must be number ${n}`);return t=null!=t?t:n,e=null!=e?e:0,_t(this.src.src).move({position:t,velocity:e,timestamp:i})}transition({target:t,duration:e,easing:n}){let{value:i,offset:r}=this.query();if("number"!=typeof i)throw new Error(`warning: cursor state must be number ${i}`);return _t(this.src.src).transition(i,t,r,r+e,n)}interpolate({tuples:t,duration:e}){let n=this.query().offset;return t=t.map((([t,i])=>[t,n+i*e])),_t(this.src.src).interpolate(t)}}T(vt.prototype),T(vt.prototype);class yt extends U{constructor(t){super(),this.index=new bt(t.index);const e=this._onchange.bind(this);t.add_callback(e)}_onchange(t){this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change")}}class bt extends w{constructor(t,e={}){super(),this._index=t;let{condition:n=t=>t.length>0}=e;this._condition=n}nearby(t){t=a.from_input(t);const e=this._index.nearby(t);let n=this._condition(e.center);const i=t=>this._condition(t)!=n;let r,s,o=this._index.find_region(e,{direction:1,condition:i});null!=o&&(r=a.from_interval(o.itv)[0]);let l=this._index.find_region(e,{direction:-1,condition:i});null!=l&&(s=a.from_interval(l.itv)[1]),s=s||[-1/0,0],r=r||[1/0,0];const h=a.flip(s,"low"),u=a.flip(r,"high");return{itv:c.from_endpoints(h,u),center:[(_=n,{query:function(t){return{value:_,dynamic:!1,offset:t}}})],left:s,right:r};var _}}class wt extends U{constructor(t,e={}){super();const{expr:n}=e;let i;n&&(i=t=>n.eval(t));const r=this._onchange.bind(this);for(let e of t)e.add_callback(r);let s=new it(t);this._index=new bt(s,{condition:i})}get index(){return this._index}_onchange(t){this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change")}}function xt(t){if(!(t instanceof U))throw new Error(`must be layer ${t}`);return{eval:function(e){for(let n of e)if(n.src==t)return!0;return!1}}}function kt(t={}){let{src:e,...n}=t;return e instanceof U?e:(null==e&&(e=new b(n)),new W({src:e,...n}))}function Et(t={}){const{ctrl:e,...n}=t,i=kt(n);return new vt({ctrl:e,src:i})}return xt.and=function(...t){return{eval:function(e){return t.every((t=>t.eval(e)))}}},xt.or=function(...t){return{eval:function(e){return t.some((t=>t.eval(e)))}}},xt.xor=function(t,e){return{eval:function(n){return t.eval(n)!=e.eval(n)}}},xt.not=function(t){return{eval:function(e){return!t.eval(e)}}},t.boolean=function(t){return new yt(t)},t.cmd=_t,t.cursor=Et,t.layer=kt,t.logical_expr=xt,t.logical_merge=function(t,e){return new wt(t,e)},t.merge=function(t,e={}){const{type:n=""}=e;return new tt(t,n in Z?Z[n]:e)},t.playback=Et,t.shift=function(t,e){return new ot(t,e)},t.variable=Et,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
