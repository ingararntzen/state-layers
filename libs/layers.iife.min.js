var LAYERS=function(t){"use strict";function e(t){return"number"==typeof t}const n=Object.freeze({HIGH_OPEN:")",HIGH_CLOSED:"]",VALUE:"",LOW_CLOSED:"[",LOW_OPEN:"("});const i=new Map([[n.HIGH_OPEN,-1],[n.HIGH_CLOSED,0],[n.VALUE,0],[n.LOW_CLOSED,0],[n.LOW_OPEN,1]]);function r(t){return t[1]==n.LOW_CLOSED||t[1]==n.LOW_OPEN}function s(t){if(Array.isArray(t)||(t=[t,n.VALUE]),2!=t.length)throw new Error("Endpoint must be a length-2 array",t);let[i,r]=t;if(s=r,!Object.values(n).includes(s))throw new Error("Unsupported endpoint type",r);var s;if(i==-1/0)return[null,n.LOW_CLOSED];if(i==1/0)return[null,n.HIGH_CLOSED];if(null==i||null==i||e(i))return[i,r];throw new Error("endpoint must be null or number",i)}const o=s(1/0),a=s(-1/0);function c(t){return null!=t[0]?[t[0],t[1]]:r(t)?[-1/0,n.LOW_CLOSED]:[1/0,n.HIGH_CLOSED]}function l(t,e){return t<e?-1:t>e?1:0}function u(t,e){const[n,r]=c(t),[s,o]=c(e),a=l(n,s);if(0==a){return l(i.get(r),i.get(o))}return a}function h(t,e){return u(t,e)<=0}function _(t,e){return u(t,e)>=0}function f(t,e){return 0==u(t,e)}function d(t){const[e,i,r,o]=t,a=r?n.LOW_CLOSED:n.LOW_OPEN,c=o?n.HIGH_CLOSED:n.HIGH_OPEN;return[s([e,a]),s([i,c])]}function p(t,e){const[n,i]=d(t);return h(n,e=s(e))&&h(e,i)}const g={le:h,lt:function(t,e){return u(t,e)<0},ge:_,gt:function(t,e){return u(t,e)>0},cmp:u,eq:f,min:function(t,e){return h(t,e)?t:e},max:function(t,e){return _(t,e)?t:e},flip:function(t,e){if(e)throw new Error("target is deprecated");let[i,r]=t;if(null==i)return t;if(r==n.HIGH_OPEN)return[i,n.LOW_CLOSED];if(r==n.HIGH_CLOSED)return[i,n.LOW_OPEN];if(r==n.LOW_OPEN)return[i,n.HIGH_CLOSED];if(r==n.LOW_CLOSED)return[i,n.HIGH_OPEN];throw new Error("illegal endpoint type",r)},from_interval:d,from_input:s,types:{...n},POS_INF:o,NEG_INF:a},m={covers_endpoint:p,covers_point:function(t,e){return p(t,e)},is_singular:function(t){const[e,n]=d(itv);return f(e,n)},from_endpoints:function(t,e){let[i,s]=t,[o,a]=e;if(!r(t))throw new Error("illegal low endpoint",t);if((c=e)[1]!=n.HIGH_CLOSED&&c[1]!=n.HIGH_OPEN)throw new Error("illegal high endpoint",e);var c;return[i,o,s==n.LOW_CLOSED,a==n.HIGH_CLOSED]},from_input:function(t){let n=t;if(null==n||null==n)throw new Error("input is undefined");if(!Array.isArray(n)){if(!e(n))throw new Error(`input: ${t}: must be Array or Number`);n=[n,n,!0,!0]}1==n.length?n=[n[0],n[0],!0,!0]:2==n.length?n=[n[0],n[1],!0,!1]:3==n.length?n=[n[0],n[1],n[2],!1]:n.length>4&&(n=[n[0],n[1],n[2],n[4]]);let[i,r,s,o]=n;if(null!=i&&i!=-1/0||(i=null),null!=r&&r!=1/0||(r=null),null==i)s=!0;else if(!e(i))throw new Error("low not a number",i);if(null==r)o=!0;else if(!e(r))throw new Error("high not a number",r);if(null!=i&&null!=r){if(i>r)throw new Error("low > high",i,r);i==r&&(s=!0,o=!0)}if("boolean"!=typeof s)throw new Error("lowInclude not boolean");if("boolean"!=typeof o)throw new Error("highInclude not boolean");return[i,r,s,o]}};function v(t,e){let n=Math.floor(t/e),i=function(t,e){return(t%e+e)%e}(t,e);return[n,i]}function y(t,e,n,i={}){let{valueFunc:r,stateFunc:s}=i;if(null!=r){return{value:r({sources:t,states:e,offset:n}),dynamic:e.map((t=>t.dymamic)).some((t=>t)),offset:n}}return null!=s?{...s({sources:t,states:e,offset:n}),offset:n}:0==e.length?{value:void 0,dynamic:!1,offset:n}:{...e[0],offset:n}}const b="__callback";function w(t){t[`${b}_handlers`]=[]}function x(t){let e={handler:t};return this[`${b}_handlers`].push(e),e}function O(t){let e=this[`${b}_handlers`].indexOf(t);e>-1&&this[`${b}_handlers`].splice(e,1)}function E(t){this[`${b}_handlers`].forEach((function(e){e.handler(t)}))}function k(t){const e={add_callback:x,remove_callback:O,notify_callbacks:E};Object.assign(t,e)}function I(t){const e=["add_callback","remove_callback"];for(const n of e){if(!(n in t))return!1;if("function"!=typeof t[n])return!1}return!0}function C(t){return t.itv=m.from_input(t.itv),t.id=t.id||function(t){for(var e="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",i=0;i<t;i++)e+=n.charAt(Math.floor(52*Math.random()));return e}(10),t}function L(t){return!!I(t)&&("get_items"in t&&"function"==typeof t.get_items)}class S{constructor(t={}){w(this),this._map=new Map,this._initialise(t)}_initialise(t={}){let{insert:e,value:n}=t;null!=n&&(e=[{itv:[-1/0,1/0,!0,!0],type:"static",data:n}]),null!=e&&this._update({insert:e,reset:!0})}update(t){return Promise.resolve().then((()=>{let e;return null!=t&&(e=this._update(t),this.notify_callbacks(e)),e}))}_update(t){const e=new Map;let{insert:n=[],remove:i=[],reset:r=!1}=t;if(r){for(const[t,n]of this._map.entries())e.set(t,{id:t,new:void 0,old:n});this._map=new Map}else for(const t of i){let n=this._map.get(t);null!=n&&(e.set(n.id,{id:n.id,new:void 0,old:n}),this._map.delete(t))}for(let t of n){t=C(t);const n=e.get(t.id),i=null!=n?n.old:this._map.get(t.id);e.set(t.id,{id:t.id,new:t,old:i}),this._map.set(t.id,t)}return[...e.values()]}get_items(){return[...this._map.values()]}}k(S.prototype);class N{nearby(t){throw new Error("Not implemented")}first(){let{center:t,right:e}=this.nearby(g.NEG_INF);return t.length>0?g.NEG_INF:e}last(){let{left:t,center:e}=this.nearby(g.POS_INF);return e.length>0?g.POS_INF:t}right_region(t){const e=function(t){const e=g.from_interval(t.itv)[1];return g.flip(e)}(t);if(null!=e[0])return this.nearby(e)}left_region(t){const e=function(t){const e=g.from_interval(t.itv)[0];return g.flip(e)}(t);if(null!=e[0])return this.nearby(e)}find_region(t,e={}){let n,{direction:i=1,condition:r=t=>t.length>0}=e;for(;;){if(n=1==i?this.right_region(t):this.left_region(t),null==n)return;if(r(n.center))return n;t=n}}regions(t){return new q(this,t)}}class q{constructor(t,e={}){let{start:n=-1/0,stop:i=1/0,includeEmpty:r=!0}=e;if(n>i)throw new Error("stop must be larger than start",n,i);this._index=t,this._start=g.from_input(n),this._stop=g.from_input(i),this._condition=r?()=>!0:t=>t.length>0,this._current}next(){if(null==this._current&&(this._current=this._index.nearby(this._start),this._condition(this._current.center)))return{value:this._current,done:!1};let t={condition:this._condition,direction:1};return this._current=this._index.find_region(this._current,t),null==this._current?{value:void 0,done:!0}:{value:this._current,done:!1}}[Symbol.iterator](){return this}}function F(t,e){return g.cmp(t,e)}function H(t,e){return g.cmp(e,t)}function $(t,e,n,i,r){const s={center:n};if(0==n.length)s.right=r,s.left=t;else{i.sort(F);let n=i[0],o=i.slice(-1)[0],a=!g.eq(n,o);e.sort(H);let c=e[0],l=e.slice(-1)[0],u=!g.eq(c,l);g.le(r,n)?s.right=r:s.right=g.flip(n),s.next=a?s.right:r,g.ge(t,c)?s.left=t:s.left=g.flip(c),s.prev=u?s.left:t}let o=g.flip(s.left),a=g.flip(s.right);return s.itv=m.from_endpoints(o,a),s}class M{constructor(t,e,n){n=n||{},this.publisher=t,this.name=e,this.init=void 0!==n.init&&n.init,this.subscriptions=[]}subscribe(t,e){if(!t||"function"!=typeof t)throw new Error("Callback not a function",t);const n=new A(this,t,e);if(this.subscriptions.push(n),this.init&&n.init){n.init_pending=!0;let t=this;Promise.resolve().then((function(){const e=t.publisher.eventifyInitEventArgs(t.name)||[];n.init_pending=!1;for(let i of e)t.trigger(i,[n],!0)}))}return n}trigger(t,e,n){let i,r;for(const s of e)if(!s.terminated){i={src:this.publisher,name:this.name,sub:s,init:n},r=s.ctx||this.publisher;try{s.callback.call(r,t,i)}catch(t){console.log(`Error in ${this.name}: ${s.callback} ${t}`)}}}unsubscribe(t){let e=this.subscriptions.indexOf(t);e>-1&&(this.subscriptions.splice(e,1),t.terminate())}}class A{constructor(t,e,n){n=n||{},this.event=t,this.name=t.name,this.callback=e,this.init=void 0===n.init?this.event.init:n.init,this.init_pending=!1,this.terminated=!1,this.ctx=n.ctx}terminate(){this.terminated=!0,this.callback=void 0,this.event.unsubscribe(this)}}function P(t){return t.__eventify_eventMap=new Map,t.__eventify_buffer=[],t}function D(t){function e(t,e){const n=t.__eventify_eventMap.get(e);if(null==n)throw new Error("Event undefined",e);return n}t.eventifyDefine=function(t,e){if(this.__eventify_eventMap.has(t))throw new Error("Event already defined",t);this.__eventify_eventMap.set(t,new M(this,t,e))},t.eventifyTrigger=function(t,e){return this.eventifyTriggerAll([{name:t,eArg:e}])},t.eventifyTriggerAlike=function(t,e){return this.eventifyTriggerAll(e.map((e=>({name:t,eArg:e}))))},t.eventifyTriggerAll=function(t){if(0==t.length)return;let n=t.map((t=>{let{name:n,eArg:i}=t,r=e(this,n),s=r.subscriptions.filter((t=>0==t.init_pending));return[r,i,s]}),this);const i=n.length,r=this.__eventify_buffer,s=this.__eventify_buffer.length;this.__eventify_buffer.length=s+i;for(let t=0;t<i;t++)r[s+t]=n[t];if(0==s){let t=this;Promise.resolve().then((function(){for(let[e,n,i]of t.__eventify_buffer)e.trigger(n,i,!1);t.__eventify_buffer=[]}))}},t.eventifySubscriptions=function(t){return e(this,t).subscriptions},t.on=function(t,n,i){return e(this,t).subscribe(n,i)},t.off=function(t){return e(this,t.name).unsubscribe(t)}}D(class{constructor(t){P(this),this._value=t,this.eventifyDefine("change",{init:!0})}eventifyInitEventArgs(t){if("change"==t)return[this._value]}get value(){return this._value}set value(t){t!=this._value&&(this._value=t,this.eventifyTrigger("change",t))}}.prototype);const G="srcprop",T=`__${G}`;function W(t){t[`${T}`]=new Map}function j(t){const e={};e[`${G}_register`]=function(t,e={}){let{mutable:n=!0}=e;const i=this[`${T}`];i.set(t,{init:!1,mutable:n,entity:void 0,handles:[]}),Object.defineProperty(this,t,{get:function(){return i.get(t).entity},set:function(e){this[`${G}_check`]&&(e=this[`${G}_check`](t,e)),e!=i.get(t).entity&&this[`${T}_attach`](t,e)}})},e[`${T}_attach`]=function(t,e){const n=this[`${T}`].get(t);if(n.init&&!n.mutable)throw new Error(`${t} can not be reassigned`);const i=Array.isArray(e)?e:[e];if(n.handles.length>0)for(const[t,e]of Object.entries(i))I(e)&&e.remove_callback(n.handles[t]);if(n.handles=[],n.entity=e,n.init=!0,this[`${G}_onchange`]){const e=function(e){this[`${G}_onchange`](t,e)}.bind(this);for(const t of i)I(t)&&n.handles.push(t.add_callback(e));this[`${G}_onchange`](t,"reset")}},Object.assign(t,e)}class z{constructor(t){this._itv=t}get itv(){return this._itv}state(t){throw new Error("not implemented")}query(t){return m.covers_point(this._itv,t)?{...this.state(t),offset:t}:{value:void 0,dynamic:!1,offset:t}}}class U extends z{constructor(t,e){super(t),this._value=e}state(){return{value:this._value,dynamic:!1}}}class V extends z{constructor(t,e){super(t);const{position:n=0,velocity:i=0,acceleration:r=0,timestamp:s=0}=e;this._pos_func=function(t){let e=t-s;return n+i*e+.5*r*e*e},this._vel_func=function(t){return i+r*(t-s)},this._acc_func=function(t){return r}}state(t){let e=this._pos_func(t),n=this._vel_func(t),i=this._acc_func(t);return{position:e,velocity:n,acceleration:i,timestamp:t,value:e,dynamic:0!=n||0!=i}}}function B(t){return Math.pow(t,2)}class R extends z{constructor(t,e){super(t);let{v0:n,v1:i,easing:r}=e,[s,o]=this._itv.slice(0,2);this._dynamic=i-n!=0,this._trans=function(t){return t-=s,t/=parseFloat(o-s),"ease-in"==r?t=B(t):"ease-out"==r?t=function(t){return 1-B(1-t)}(t):"ease-in-out"==r&&(t=function(t){return t<.5?B(2*t)/2:(2-B(2*(1-t)))/2}(t)),t=Math.max(t,0),t=Math.min(t,1),n+(i-n)*t}}state(t){return{value:this._trans(t),dynamic:this._dynamic}}}class Y extends z{constructor(t,e){super(t),this._trans=function(t){if(t.length<1)return function(){};if(1==t.length)return function(){return t[0][0]};const e=[...t].sort(((t,e)=>t[1]-e[1]));return function(t){if(t<=e[0][1]){const[n,i]=e[0],[r,s]=e[1];return n+(t-i)*(r-n)/(s-i)}if(t>=e[e.length-1][1]){const[n,i]=e[e.length-2],[r,s]=e[e.length-1];return n+(t-i)*(r-n)/(s-i)}for(let n=0;n<e.length-1;n++)if(t>=e[n][1]&&t<=e[n+1][1]){const[i,r]=e[n],[s,o]=e[n+1];return i+(t-r)*(s-i)/(o-r)}}}(e)}state(t){return{value:this._trans(t),dynamic:!0}}}class J{constructor(){this._array=[]}get size(){return this._array.length}get array(){return this._array}indexOf(t){const e=g.from_input(t);let n=0,i=this._array.length-1;for(;n<=i;){const t=Math.floor((n+i)/2);let r=this._array[t];if(g.eq(r,e))return[!0,t];g.lt(r,e)?n=t+1:i=t-1}return[!1,n]}geIndexOf(t){let[e,n]=this.indexOf(t);return n<this._array.length?n:-1}leIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n:n-1,n>=0?n:-1}gtIndexOf(t){let[e,n]=this.indexOf(t);return n=e?n+1:n,n<this._array.length?n:-1}ltIndexOf(t){let[e,n]=this.indexOf(t);return n-=1,n>=0?n:-1}update(t=[],e=[]){let n=[];for(let e of t){let[t,i]=this.indexOf(e);t&&n.push(i)}for(let t of n)this._array[t]=void 0;let i=n.length>0,r=e.length>0;r&&function(t,e){const n=t.length,i=e.length;t.length+=i;for(let r=0;r<i;r++)t[n+r]=e[r]}(this._array,e),(i||r)&&this._array.sort(g.cmp),i&&(this._array.length-=n.length),r&&function(t){let e=0;for(;!(e+1>=t.length);)g.eq(t[e],t[e+1])?t.splice(e+1,1):e+=1}(this._array)}get_by_index(t){if(t>-1&&t<this._array.length)return this._array[t]}lookup(t){null==t&&(t=[null,null,!0,!0]);let[e,n]=g.from_interval(t),i=this.geIndexOf(e),r=this.leIndexOf(n);return-1==i||-1==r?[]:this._array.slice(i,r+1)}lt(t){return this.get_by_index(this.ltIndexOf(t))}le(t){return this.get_by_index(this.leIndexOf(t))}get(t){let[e,n]=this.indexOf(t);if(e)return this._array[n]}gt(t){return this.get_by_index(this.gtIndexOf(t))}ge(t){return this.get_by_index(this.geIndexOf(t))}}const{LOW_CLOSED:K,LOW_OPEN:Q,HIGH_CLOSED:X,HIGH_OPEN:Z}=g.types,tt=[K,Q,X,Z];class et{constructor(){this._map=new Map([[K,new Set],[Q,new Set],[X,new Set],[Z,new Set]])}add(t){const[e,n]=t;return this._map.get(n).add(e)}has(t){const[e,n]=t;return this._map.get(n).has(e)}get(t){const[e,n]=t;return this._map.get(n).get(e)}list(){const t=tt.map((t=>[...this._map.get(t).values()].map((e=>[e,t]))));return[].concat(...t)}}const nt="low",it="active",rt="high";class st{constructor(){this._map=new Map([[K,new Map],[Q,new Map],[X,new Map],[Z,new Map]])}get_items_by_role(t,e){const[n,i]=t,r=this._map.get(i).get(n);return null!=r?r[e]:[]}register(t,e,n){const[i,r]=t,s=this._map.get(r);s.has(i)||s.set(i,{low:[],active:[],high:[]});const o=s.get(i),a=o[nt].length+o[rt].length==0;-1==o[n].findIndex((t=>t.id==e.id))&&o[n].push(e);const c=o[nt].length+o[rt].length==0;return a&&!c}unregister(t,e){const[n,i]=t,r=this._map.get(i),s=r.get(n);if(null!=s){const t=s[nt].length+s[rt].length==0;for(const t of[nt,it,rt]){let n=s[t].findIndex((t=>t.id==e.id));n>-1&&s[t].splice(n,1)}const i=s[nt].length+s[rt].length==0;if(!t&&i)return r.delete(n),!0}return!1}}class ot extends N{constructor(t){if(super(),!L(t))throw new Error(`must be stateprovider ${t}`);this._sp=t,this._initialise(),this.refresh()}get src(){return this._sp}_initialise(){this._itemsmap=new st,this._endpoints=new J,this._index=[]}refresh(t){const e=new et,n=new et;let i,r=[],s=[];if(null==t)r=this.src.get_items(),this._initialise();else for(const e of t)null!=e.new&&r.push(e.new),null!=e.old&&s.push(e.old);for(const t of s){this._endpoints.lookup(t.itv);for(const n of this._endpoints.lookup(t.itv)){this._itemsmap.unregister(n,t)&&e.add(n)}}for(const t of r){const[e,r]=g.from_interval(t.itv);i=this._itemsmap.register(e,t,nt),i&&n.add(e),i=this._itemsmap.register(r,t,rt),i&&n.add(r)}this._endpoints.update(e.list(),n.list());const o=new Set;for(const t of this._endpoints.array){for(let e of this._itemsmap.get_items_by_role(t,nt))o.add(e);for(let e of o)this._itemsmap.register(t,e,it);for(let e of this._itemsmap.get_items_by_role(t,rt))o.delete(e)}}_covers(t){const e=g.from_input(t),n=this._endpoints.le(e)||g.NEG_INF,i=this._endpoints.ge(e)||g.POS_INF;if(g.eq(n,i))return this._itemsmap.get_items_by_role(n,it);{const t=this._itemsmap.get_items_by_role(n,it),e=this._itemsmap.get_items_by_role(i,it),r=new Set(t.map((t=>t.id)));return e.filter((t=>r.has(t.id)))}}nearby(t){const e=g.from_input(t);let n=this._covers(e);const i=[],r=[];for(const t of n){const[e,n]=g.from_interval(t.itv);i.push(n),r.push(e)}let s,o=e;for(;!(o=this._endpoints.lt(o)||g.NEG_INF,null==o[0]||(s=this._itemsmap.get_items_by_role(o,rt),s.length>0)););let a=e;for(;!(a=this._endpoints.gt(a)||g.POS_INF,null==a[0]||(s=this._itemsmap.get_items_by_role(a,nt),s.length>0)););return $(o,r,n,i,a)}}class at{constructor(t={}){const{CacheClass:e=ct}=t,{valueFunc:n,stateFunc:i}=t;w(this),P(this),this.eventifyDefine("change",{init:!0}),this._index,this._CacheClass=e,this._cache_object,this._cache_objects=[],this._queryOptions={valueFunc:n,stateFunc:i}}get index(){return this._index}set index(t){this._index=t}get queryOptions(){return this._queryOptions}get cache(){return null==this._cache_object&&(this._cache_object=new this._CacheClass(this)),this._cache_object}getCache(){const t=new this._CacheClass(this);return this._cache_objects.push(t),t}clearCaches(){for(const t of this._cache_objects)t.clear()}query(t){return this.cache.query(t)}regions(t){return this.index.regions(t)}sample(t={}){let{start:e=-1/0,stop:n=1/0,step:i=1}=t;if(e>n)throw new Error("stop must be larger than start",e,n);e=[e,0],n=[n,0],e=g.max(this.index.first(),e),n=g.min(this.index.last(),n);const r=this.getCache();return function(t,e,n=1,i={}){const r=[],{include_end:s=!1}=i;if(0===n)throw new Error("Step cannot be zero.");if(t<e)for(let i=t;i<e;i+=n)r.push(i);else if(t>e)for(let i=t;i>e;i-=n)r.push(i);return s&&r.push(e),r}(e[0],n[0],i,{include_end:!0}).map((t=>[r.query(t).value,t]))}}k(at.prototype),D(at.prototype);class ct{constructor(t){this._layer=t,this._nearby,this._state}get src(){return this._layer}query(t){const e=null==this._nearby||!m.covers_point(this._nearby.itv,t);if(!e&&null!=this._state&&!this._state.dynamic)return{...this._state,offset:t};e&&(this._nearby=this._layer.index.nearby(t));const n=this._nearby.center.map((e=>e.query(t))),i=y(this._nearby.center,n,t,this._layer.queryOptions);return this._state=i.dynamic?void 0:i,i}clear(){this._nearby=void 0,this._state=void 0}}class lt extends at{constructor(t={}){const{src:e,valueFunc:n,stateFunc:i}=t;super({CacheClass:ut,valueFunc:n,stateFunc:i}),W(this),this.srcprop_register("src"),this.src=e}srcprop_check(t,e){if("src"==t){if(!L(e))throw new Error(`"src" must be state provider ${e}`);return e}}srcprop_onchange(t,e){"src"==t&&(null!=this.index&&"reset"!=e||(this.index=new ot(this.src)),"reset"!=e&&this.index.refresh(e),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change"))}}j(lt.prototype);class ut{constructor(t){this._layer=t,this._nearby=void 0,this._segment=void 0}get src(){return this._layer}get segment(){return this._segment}query(t){if(null==this._nearby||!m.covers_point(this._nearby.itv,t)){this._nearby=this._layer.index.nearby(t);let{itv:e,center:n}=this._nearby;this._segments=n.map((t=>function(t,e){let{type:n="static",data:i}=e;if("static"==n)return new U(t,i);if("transition"==n)return new R(t,i);if("interpolation"==n)return new Y(t,i);if("motion"==n)return new V(t,i);console.log("unrecognized segment type",n)}(e,t)))}const e=this._segments.map((e=>e.query(t)));return y(this._segments,e,t,this._layer.queryOptions)}clear(){this._nearby=void 0,this._segment=void 0}}const ht={sum:{valueFunc:function(t){return t.states.map((t=>t.value)).reduce(((t,e)=>t+e),0)}},stack:{stateFunc:function(t){return{...t.states[0]}}},array:{valueFunc:function(t){return t.states.map((t=>t.value))}}};class _t extends at{constructor(t,e){super(e),W(this),this.srcprop_register("sources",{mutable:!1}),this.sources=t}srcprop_check(t,e){if("sources"==t){if(!Array.isArray(e))throw new Error(`sources must be array ${e}`);if(!e.map((t=>t instanceof at)).every((t=>t)))throw new Error(`sources must all be layers ${e}`)}return e}srcprop_onchange(t,e){"sources"==t&&(null!=this.index&&"reset"!=e||(this.index=new pt(this.sources)),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change"))}}function ft(t,e){return g.cmp(t,e)}function dt(t,e){return g.cmp(e,t)}j(_t.prototype);class pt extends N{constructor(t){super(),this._sources=t,this._caches=new Map(t.map((t=>[t,t.getCache()])))}nearby(t){t=g.from_input(t);const e=[],n=[],i=[],r=[],s=[];for(let o of this._sources){let a=o.index.nearby(t),c=o.index.find_region(a,{direction:-1}),l=o.index.find_region(a,{direction:1});if(null!=c&&e.push(g.from_interval(c.itv)[1]),null!=l&&n.push(g.from_interval(l.itv)[0]),a.center.length>0){i.push(this._caches.get(o));let[t,e]=g.from_interval(a.itv);r.push(e),s.push(t)}}n.sort(ft);const o=n[0]||g.POS_INF;e.sort(dt);return $(e[0]||g.NEG_INF,s,i,r,o)}}function gt(t,e){if(null==t||!isFinite(t))return t;if("number"==typeof t)return t+e;if(Array.isArray(t)&&t.length>1){let[n,i]=t;return[n+e,i]}}class mt extends N{constructor(t,e){super(),this._layer=t,this._skew=e,this._cache=t.getCache(),this._shifted_cache={query:function(t){return{...this._cache.query(gt(t,-this._skew)),offset:t}}.bind(this)}}nearby(t){t=g.from_input(t);const e=this._layer.index.nearby(gt(t,-this._skew)),n=e.itv.slice();return n[0]=gt(e.itv[0],this._skew),n[1]=gt(e.itv[1],this._skew),{itv:n,left:gt(e.left,this._skew),right:gt(e.right,this._skew),center:e.center.map((()=>this._shifted_cache))}}}class vt extends at{constructor(t,e,n={}){super(n),this._skew=e,W(this),this.srcprop_register("src"),this.src=t}srcprop_check(t,e){if("src"==t){if(!(e instanceof at))throw new Error(`"src" must be Layer ${e}`);return e}}srcprop_onchange(t,e){"src"==t&&(null!=this.index&&"reset"!=e||(this.index=new mt(this.src,this._skew)),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change"))}}j(vt.prototype);const yt=function(){return performance.now()/1e3},bt=function(){return new Date/1e3},wt=function(){const t=yt(),e=bt();return{now:function(){const n=yt();return e+(n-t)}}}();function xt(t){return"now"in t&&"function"==typeof t.now}const Ot={assign:function(t){if(null==t)return[];return[{itv:[-1/0,1/0,!0,!0],type:"static",data:t}]},move:function(t){return[{itv:[-1/0,1/0,!0,!0],type:"motion",data:t}]},transition:function(t,e,n,i,r){return[{itv:[-1/0,n,!0,!1],type:"static",data:t},{itv:[n,i,!0,!1],type:"transition",data:{v0:t,v1:e,t0:n,t1:i,easing:r}},{itv:[i,1/0,!0,!0],type:"static",data:e}]},interpolate:function(t){let[e,n]=t[0],[i,r]=t[t.length-1];return[{itv:[-1/0,n,!0,!1],type:"static",data:e},{itv:[n,r,!0,!1],type:"interpolation",data:t},{itv:[r,1/0,!0,!0],type:"static",data:i}]}};function Et(t){if(!L(t))throw new Error(`target.src must be stateprovider ${t}`);let e=Object.entries(Ot).map((([e,n])=>[e,function(...e){let i=n.call(this,...e);return t.update({insert:i,reset:!0})}]));return Object.fromEntries(e)}class kt{constructor(t={}){if(this._options=Object.assign({rate:50},t),this._options.rate<50)throw new Error(`illegal rate ${rate}, minimum rate is 50`);this._set=new Set,this._variable_map=new Map,this.__onvariablechange=this._onvariablechange.bind(this)}bind(t,e,n,i={}){let r={callback:e,variable:t,delay:n};if(this._set.add(r),this._variable_map.has(t))this._variable_map.get(t).handles.push(r);else{let e={sub:t.on("change",this.__onvariablechange),polling:!1,handles:[r]};this._variable_map.set(t,e)}return r}release(t){if(!this._set.delete(t))return;t.tid=void 0;let e=t.variable,{sub:n,handles:i}=this._variable_map.get(e),r=i.indexOf(t);r>-1&&i.splice(r,1),0==i.length&&(this._variable_map.delete(e),e.off(n))}_onvariablechange(t,e){let n=e.src,{handles:i}=this._variable_map.get(n),r=t;this._reevaluate_polling(n,r);for(let t of i)t.callback(r)}_reevaluate_polling(t,e){let n=this._variable_map.get(t),{polling:i}=n,r=(e=e||t.query()).dynamic;!i&&r?(n.polling=!0,this._set_timeouts(t)):i&&!r&&(n.polling=!1,this._clear_timeouts(t))}_set_timeouts(t){let{handles:e}=this._variable_map.get(t);for(let t of e)this._set_timeout(t)}_set_timeout(t){let e=this._calculate_delta(t.delay),n=function(){this._handle_timeout(t)}.bind(this);t.tid=setTimeout(n,e)}_calculate_delta(t){let e=this._options.rate,n=Math.round(performance.now()),[i,r]=v(n,e),[s,o]=v(n+t,e);return Math.max(s,i+1)*e-performance.now()}_clear_timeouts(t){let{handles:e}=this._variable_map.get(t);for(let t of e)null!=t.tid&&(clearTimeout(t.tid),t.tid=void 0)}_handle_timeout(t){if(null==t.tid)return;t.tid=void 0;let{variable:e}=t,n=e.query();if(n.dynamic)this._set_timeout(t);else{this._variable_map.get(e).polling=!1}t.callback(n)}}const It=new kt,Ct=new class extends kt{constructor(t={}){super(t),this._handle}_set_timeouts(t){}_set_timeout(t){}_calculate_delta(t){}_clear_timeouts(t){}_handle_timeout(t){}_onvariablechange(t,e){super._onvariablechange(t,e),this._callback()}_callback(){let t=[...this._variable_map.entries()].filter((([t,e])=>e.polling)).map((([t,e])=>t));if(t.length>0){for(let e of t){let{handles:t}=this._variable_map.get(e),n=e.query();for(let e of t)e.callback(n)}this._handle=requestAnimationFrame(this._callback.bind(this))}}};class Lt extends N{constructor(t){super(),this._cache=t.getCache()}nearby(t){return{itv:[-1/0,1/0,!0,!0],center:[this._cache],left:[-1/0,0],prev:[-1/0,0],right:[1/0,0],next:[1/0,0]}}}class St{constructor(t){this._cursor=t,this._cache=this._cursor.src.getCache()}query(){const t=this._cursor._get_ctrl_state().value;return this._cache.query(t)}get segment(){return this._cache.segment}clear(){this._cache.clear()}}class Nt extends at{constructor(t={}){super({CacheClass:St}),W(this),this.srcprop_register("src"),this.srcprop_register("ctrl"),this._tid,this._pid;let{src:e,ctrl:n}=t;this.ctrl=n||wt,this.src=e}srcprop_check(t,e){if("ctrl"==t){if(!(xt(e)||e instanceof Nt))throw new Error(`"ctrl" must be clockProvider or Cursor ${e}`)}else if("src"==t&&!(e instanceof at))throw new Error(`"src" must be Layer ${e}`);return e}srcprop_onchange(t,e){this.__handle_change(t,e)}__handle_change(t,e){clearTimeout(this._tid),clearInterval(this._pid),this.src&&this.ctrl&&(null!=this.index&&"reset"!=e||(this.index=new Lt(this)),this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change",this.query()),this.__detect_future_change())}__detect_future_change(){const t=this._get_ctrl_state(),{value:e,offset:n}=t;if(!t.dynamic)return;const i=this.src.index.nearby(e);let[r,s]=i.itv.slice(0,2);if(null==r&&(r=-1/0),null==s&&(s=1/0),xt(this.ctrl))return isFinite(s)?void this.__set_timeout(s,e,1,n):void 0;if(xt(this.ctrl.ctrl)){if(!isFinite(r)&&!isFinite(s))return;const t=this.ctrl.src.index.nearby(n);if(1==t.center.length){const i=t.center[0];if("motion"==i.type){const{velocity:t,acceleration:o=0}=i.data;if(0==o){let i=t>0?s:r;return isFinite(i)?void this.__set_timeout(i,e,t,n):void 0}}else if("transition"==i.type){const{v0:t,v1:o,t0:a,t1:c,easing:l="linear"}=i.data;if("linear"==l){let i=(o-t)/(c-a);const l=i>0?Math.min(s,o):Math.max(r,o);return void this.__set_timeout(l,e,i,n)}}}}this.__set_polling(i.itv)}__set_timeout(t,e,n,i){const r=(t-e)/n,s=i+r;this._tid=setTimeout((()=>{this.__handle_timeout(s)}),1e3*r+1)}__handle_timeout(t){const e=this._get_ctrl_state().offset,n=t-e;n<=0?this.__handle_change("timeout"):this._tid=setTimeout((()=>{this.__handle_timeout(t)}),1e3*n)}__set_polling(t){this._pid=setInterval((()=>{this.__handle_poll(t)}),100)}__handle_poll(t){let e=this.ctrl.query().value;m.covers_point(t,e)||this.__handle_change("timeout")}_get_ctrl_state(){if(xt(this.ctrl)){let t=this.ctrl.now();return{value:t,dynamic:!0,offset:t}}{let t=this.ctrl.query();if("number"!=typeof t.value)throw new Error(`warning: ctrl state must be number ${t.value}`);return t}}get value(){return this.query().value}eventifyInitEventArgs(t){if("change"==t)return[this.query()]}bind(t,e,n={}){return function(t,e,n,i={}){let r;return Boolean(parseFloat(n))?(r=It.bind(t,e,n,i),["timeout",r]):(r=Ct.bind(t,e,0,i),["framerate",r])}(this,t,e,n)}release(t){return function(t){let[e,n]=t;return"timeout"==e?It.release(n):"framerate"==e?Ct.release(n):void 0}(t)}assign(t){return Et(this.src.src).assign(t)}move({position:t,velocity:e}){let{value:n,offset:i}=this.query();if("number"!=typeof n)throw new Error(`warning: cursor state must be number ${n}`);return t=null!=t?t:n,e=null!=e?e:0,Et(this.src.src).move({position:t,velocity:e,timestamp:i})}transition({target:t,duration:e,easing:n}){let{value:i,offset:r}=this.query();if("number"!=typeof i)throw new Error(`warning: cursor state must be number ${i}`);return Et(this.src.src).transition(i,t,r,r+e,n)}interpolate({tuples:t,duration:e}){let n=this.query().offset;return t=t.map((([t,i])=>[t,n+i*e])),Et(this.src.src).interpolate(t)}}j(Nt.prototype),j(Nt.prototype);class qt extends at{constructor(t){super(),this.index=new Ft(t.index);const e=this._onchange.bind(this);t.add_callback(e)}_onchange(t){this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change")}}class Ft extends N{constructor(t,e={}){super(),this._index=t;let{condition:n=t=>t.length>0}=e;this._condition=n}nearby(t){t=g.from_input(t);const e=this._index.nearby(t);let n=this._condition(e.center);const i=t=>this._condition(t)!=n;let r,s,o=this._index.find_region(e,{direction:1,condition:i});null!=o&&(r=g.from_interval(o.itv)[0]);let a=this._index.find_region(e,{direction:-1,condition:i});null!=a&&(s=g.from_interval(a.itv)[1]),s=s||g.NEG_INF,r=r||g.POS_INF;const c=g.flip(s),l=g.flip(r);return{itv:m.from_endpoints(c,l),center:[(u=n,{query:function(t){return{value:u,dynamic:!1,offset:t}}})],left:s,right:r};var u}}class Ht extends at{constructor(t,e={}){super();const{expr:n}=e;let i;n&&(i=t=>n.eval(t));const r=this._onchange.bind(this);for(let e of t)e.add_callback(r);let s=new pt(t);this._index=new Ft(s,{condition:i})}get index(){return this._index}_onchange(t){this.clearCaches(),this.notify_callbacks(),this.eventifyTrigger("change")}}function $t(t){if(!(t instanceof at))throw new Error(`must be layer ${t}`);return{eval:function(e){for(let n of e)if(n.src==t)return!0;return!1}}}function Mt(t={}){let{src:e,...n}=t;return e instanceof at?e:(null==e&&(e=new S(n)),new lt({src:e,...n}))}function At(t={}){const{ctrl:e,...n}=t,i=Mt(n);return new Nt({ctrl:e,src:i})}return $t.and=function(...t){return{eval:function(e){return t.every((t=>t.eval(e)))}}},$t.or=function(...t){return{eval:function(e){return t.some((t=>t.eval(e)))}}},$t.xor=function(t,e){return{eval:function(n){return t.eval(n)!=e.eval(n)}}},$t.not=function(t){return{eval:function(e){return!t.eval(e)}}},t.boolean=function(t){return new qt(t)},t.cmd=Et,t.cursor=At,t.layer=Mt,t.logical_expr=$t,t.logical_merge=function(t,e){return new Ht(t,e)},t.merge=function(t,e={}){const{type:n=""}=e;return new _t(t,n in ht?ht[n]:e)},t.playback=At,t.shift=function(t,e){return new vt(t,e)},t.variable=At,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
